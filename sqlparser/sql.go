//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const TEXT = 57477
const TINYTEXT = 57478
const MEDIUMTEXT = 57479
const LONGTEXT = 57480
const BLOB = 57481
const TINYBLOB = 57482
const MEDIUMBLOB = 57483
const LONGBLOB = 57484
const JSON = 57485
const ENUM = 57486
const NULLX = 57487
const AUTO_INCREMENT = 57488
const APPROXNUM = 57489
const SIGNED = 57490
const UNSIGNED = 57491
const ZEROFILL = 57492
const DATABASES = 57493
const TABLES = 57494
const VITESS_KEYSPACES = 57495
const VITESS_SHARDS = 57496
const VSCHEMA_TABLES = 57497
const CURRENT_TIMESTAMP = 57498
const DATABASE = 57499
const CURRENT_DATE = 57500
const CURRENT_TIME = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const UTC_DATE = 57504
const UTC_TIME = 57505
const UTC_TIMESTAMP = 57506
const REPLACE = 57507
const CONVERT = 57508
const CAST = 57509
const GROUP_CONCAT = 57510
const SEPARATOR = 57511
const MATCH = 57512
const AGAINST = 57513
const BOOLEAN = 57514
const LANGUAGE = 57515
const WITH = 57516
const QUERY = 57517
const EXPANSION = 57518
const UNUSED = 57519
const PARTITION = 57520
const PARTITIONS = 57521
const HASH = 57522
const XA = 57523
const ENGINES = 57524
const STATUS = 57525
const VERSIONS = 57526
const PROCESSLIST = 57527
const QUERYZ = 57528
const TXNZ = 57529
const KILL = 57530
const START = 57531
const TRANSACTION = 57532
const COMMIT = 57533
const SESSION = 57534

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"STATUS",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 261,
	104, 440,
	-2, 436,
	-1, 262,
	104, 441,
	-2, 437,
	-1, 507,
	5, 25,
	-2, 393,
	-1, 523,
	104, 443,
	-2, 439,
	-1, 736,
	5, 26,
	-2, 272,
	-1, 760,
	5, 26,
	-2, 394,
	-1, 834,
	5, 25,
	-2, 396,
	-1, 931,
	5, 26,
	-2, 397,
}

const yyNprod = 599
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 6114

var yyAct = [...]int{

	262, 528, 958, 464, 293, 298, 872, 825, 771, 320,
	256, 664, 564, 516, 886, 702, 527, 521, 883, 824,
	665, 239, 721, 322, 619, 804, 626, 50, 526, 645,
	596, 729, 692, 661, 78, 228, 537, 287, 345, 49,
	248, 551, 629, 296, 266, 60, 351, 257, 232, 524,
	463, 3, 560, 264, 300, 970, 957, 969, 228, 323,
	44, 949, 967, 956, 817, 258, 258, 866, 688, 259,
	259, 263, 228, 228, 199, 54, 948, 68, 69, 544,
	229, 65, 64, 182, 281, 631, 775, 552, 861, 190,
	859, 531, 205, 196, 274, 238, 269, 904, 67, 56,
	57, 58, 59, 945, 44, 926, 928, 285, 628, 944,
	500, 943, 244, 498, 272, 72, 499, 230, 71, 177,
	233, 234, 235, 236, 237, 77, 935, 430, 429, 439,
	440, 432, 433, 434, 435, 436, 437, 438, 431, 70,
	893, 441, 851, 63, 539, 845, 282, 539, 453, 454,
	763, 733, 476, 674, 279, 462, 362, 358, 431, 416,
	709, 441, 693, 441, 603, 419, 711, 712, 361, 646,
	267, 219, 545, 682, 927, 819, 784, 201, 601, 602,
	600, 178, 404, 204, 200, 214, 173, 212, 207, 194,
	186, 187, 172, 552, 203, 181, 185, 180, 198, 209,
	210, 179, 224, 176, 218, 175, 686, 217, 197, 208,
	213, 195, 192, 174, 211, 193, 191, 188, 183, 947,
	897, 66, 206, 215, 225, 785, 739, 220, 221, 222,
	538, 936, 646, 538, 746, 536, 846, 535, 844, 417,
	353, 418, 417, 849, 273, 171, 848, 189, 223, 202,
	184, 216, 710, 228, 708, 419, 228, 701, 419, 439,
	440, 432, 433, 434, 435, 436, 437, 438, 431, 228,
	347, 441, 228, 228, 228, 541, 805, 228, 252, 700,
	542, 228, 228, 228, 689, 231, 432, 433, 434, 435,
	436, 437, 438, 431, 740, 348, 441, 620, 807, 621,
	933, 491, 492, 907, 44, 268, 455, 456, 457, 458,
	459, 460, 283, 284, 809, 276, 813, 847, 808, 699,
	806, 349, 714, 715, 716, 811, 290, 346, 434, 435,
	436, 437, 438, 431, 810, 793, 441, 47, 783, 812,
	814, 418, 417, 773, 418, 417, 767, 599, 821, 683,
	451, 501, 964, 286, 450, 452, 228, 622, 419, 228,
	497, 419, 275, 258, 520, 501, 258, 259, 510, 493,
	259, 271, 522, 270, 522, 267, 511, 286, 422, 901,
	461, 870, 286, 466, 467, 468, 469, 470, 471, 472,
	495, 475, 477, 477, 477, 477, 477, 477, 477, 477,
	485, 486, 487, 488, 900, 507, 228, 780, 518, 465,
	532, 228, 741, 635, 508, 566, 474, 421, 20, 553,
	554, 555, 589, 591, 592, 841, 840, 590, 595, 418,
	417, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 419, 519, 597, 360,
	513, 420, 562, 563, 523, 758, 494, 418, 417, 727,
	286, 501, 790, 789, 633, 517, 418, 417, 787, 786,
	625, 243, 522, 51, 419, 870, 501, 762, 286, 598,
	635, 286, 662, 419, 360, 647, 478, 479, 480, 481,
	482, 483, 484, 582, 583, 584, 47, 623, 624, 755,
	776, 777, 778, 586, 587, 360, 593, 594, 779, 501,
	727, 258, 44, 650, 22, 259, 663, 637, 670, 643,
	365, 364, 788, 22, 671, 727, 466, 501, 653, 676,
	666, 654, 489, 546, 565, 245, 522, 505, 22, 506,
	727, 679, 561, 677, 672, 547, 548, 549, 550, 556,
	62, 939, 465, 662, 523, 640, 641, 942, 47, 668,
	557, 558, 559, 833, 410, 405, 667, 47, 44, 501,
	704, 634, 636, 681, 503, 346, 638, 639, 522, 47,
	642, 941, 47, 916, 675, 648, 695, 696, 697, 690,
	691, 915, 795, 962, 649, 585, 651, 652, 874, 877,
	878, 879, 875, 673, 876, 880, 718, 719, 720, 249,
	250, 660, 430, 429, 439, 440, 432, 433, 434, 435,
	436, 437, 438, 431, 597, 919, 441, 955, 703, 713,
	920, 717, 501, 312, 311, 313, 314, 315, 316, 917,
	352, 731, 317, 921, 918, 878, 879, 659, 658, 567,
	705, 694, 357, 350, 685, 598, 228, 899, 430, 429,
	439, 440, 432, 433, 434, 435, 436, 437, 438, 431,
	288, 898, 441, 831, 745, 501, 766, 501, 680, 501,
	501, 756, 289, 409, 522, 882, 522, 352, 522, 772,
	246, 247, 657, 734, 765, 769, 722, 757, 910, 764,
	656, 240, 363, 241, 51, 768, 909, 228, 430, 429,
	439, 440, 432, 433, 434, 435, 436, 437, 438, 431,
	869, 735, 441, 781, 782, 517, 280, 796, 797, 255,
	724, 501, 747, 890, 725, 633, 726, 415, 53, 55,
	731, 794, 48, 522, 1, 736, 737, 738, 770, 534,
	742, 802, 743, 465, 525, 748, 228, 749, 750, 751,
	752, 803, 800, 501, 501, 815, 321, 816, 822, 501,
	799, 818, 836, 837, 823, 759, 760, 761, 522, 832,
	265, 61, 666, 533, 698, 677, 838, 843, 792, 429,
	439, 440, 432, 433, 434, 435, 436, 437, 438, 431,
	850, 226, 441, 774, 540, 687, 543, 896, 684, 368,
	828, 369, 834, 367, 371, 829, 370, 366, 667, 73,
	881, 835, 857, 885, 254, 523, 260, 260, 728, 707,
	228, 228, 820, 830, 798, 706, 569, 449, 254, 254,
	501, 704, 501, 655, 669, 891, 490, 344, 908, 522,
	895, 772, 501, 766, 868, 894, 744, 666, 473, 644,
	299, 522, 588, 310, 307, 309, 308, 496, 504, 905,
	423, 228, 228, 228, 228, 839, 297, 864, 291, 912,
	925, 914, 228, 827, 828, 228, 892, 922, 228, 884,
	911, 253, 913, 667, 501, 44, 258, 903, 354, 703,
	259, 930, 929, 932, 873, 277, 278, 867, 871, 826,
	754, 852, 853, 865, 938, 934, 502, 23, 52, 251,
	19, 14, 578, 862, 863, 828, 828, 828, 828, 13,
	829, 829, 829, 829, 12, 637, 576, 27, 10, 828,
	9, 8, 7, 6, 884, 842, 5, 4, 242, 21,
	2, 18, 17, 501, 501, 501, 960, 961, 16, 15,
	11, 571, 959, 959, 959, 501, 0, 0, 0, 0,
	575, 0, 0, 906, 968, 0, 0, 0, 854, 855,
	0, 856, 0, 0, 858, 0, 860, 0, 0, 0,
	0, 924, 0, 0, 0, 937, 465, 0, 0, 0,
	931, 0, 0, 952, 953, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 577, 570, 254,
	0, 0, 254, 0, 0, 950, 951, 874, 877, 878,
	879, 875, 0, 876, 880, 403, 0, 940, 254, 254,
	254, 0, 946, 411, 0, 0, 0, 254, 254, 254,
	0, 0, 0, 723, 0, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 965, 966,
	0, 573, 0, 430, 429, 439, 440, 432, 433, 434,
	435, 436, 437, 438, 431, 0, 356, 441, 0, 359,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 374, 406, 407, 408, 0, 0,
	0, 0, 0, 0, 412, 413, 414, 0, 0, 0,
	0, 0, 254, 0, 260, 512, 386, 260, 0, 512,
	0, 391, 392, 393, 394, 395, 396, 397, 0, 398,
	399, 400, 401, 402, 387, 388, 389, 390, 372, 373,
	0, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 509,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 190, 0, 0, 205, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 0, 0, 0, 0, 0, 632, 512,
	0, 177, 0, 0, 632, 632, 0, 0, 632, 568,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 632, 632, 632, 632, 430, 429, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 0, 632,
	441, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 178, 0, 204, 200, 214, 173, 212,
	207, 194, 186, 187, 172, 0, 203, 181, 185, 180,
	198, 209, 210, 179, 224, 176, 218, 175, 0, 217,
	197, 208, 213, 195, 192, 174, 211, 193, 191, 188,
	183, 0, 0, 0, 206, 215, 225, 0, 0, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 171, 428, 189,
	223, 202, 184, 216, 442, 443, 444, 445, 446, 447,
	448, 0, 426, 427, 424, 430, 429, 439, 440, 432,
	433, 434, 435, 436, 437, 438, 431, 0, 0, 441,
	0, 0, 0, 0, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 627, 0,
	295, 0, 0, 0, 182, 0, 294, 0, 0, 331,
	190, 0, 0, 205, 196, 0, 0, 0, 0, 324,
	325, 0, 0, 254, 0, 0, 0, 0, 47, 0,
	0, 261, 312, 311, 313, 314, 315, 316, 0, 753,
	177, 317, 318, 319, 632, 0, 292, 305, 0, 330,
	512, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 630, 254, 0, 0, 342, 0, 304, 0, 0,
	301, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 219, 0, 0, 340, 0, 0, 201, 0,
	0, 0, 178, 0, 204, 200, 214, 173, 212, 207,
	194, 186, 187, 172, 0, 203, 181, 185, 180, 198,
	209, 210, 179, 224, 176, 218, 175, 0, 217, 197,
	208, 213, 195, 192, 174, 211, 193, 191, 188, 183,
	0, 0, 0, 206, 215, 225, 254, 888, 220, 221,
	222, 332, 341, 338, 339, 336, 337, 335, 334, 333,
	343, 326, 327, 329, 0, 328, 171, 0, 189, 223,
	202, 184, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 254, 254,
	254, 0, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 254, 0, 0, 888, 0, 0, 260, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 500, 0, 529, 530,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 678,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 500, 0, 529, 530,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 902, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 47, 0, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 801, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	514, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 515, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 159, 148,
	120, 161, 97, 112, 170, 113, 114, 140, 85, 128,
	199, 110, 0, 100, 80, 107, 81, 98, 122, 182,
	125, 96, 150, 131, 167, 190, 135, 0, 205, 196,
	0, 0, 124, 153, 126, 147, 119, 141, 90, 134,
	162, 111, 138, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 137, 157, 109, 139,
	79, 136, 0, 83, 86, 169, 155, 103, 104, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 144, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	133, 0, 0, 0, 88, 84, 121, 0, 0, 0,
	75, 0, 102, 145, 0, 154, 118, 219, 156, 116,
	115, 160, 163, 201, 151, 99, 108, 178, 106, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 87, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 82, 0, 206, 215,
	225, 95, 74, 220, 221, 222, 93, 94, 91, 92,
	129, 130, 164, 165, 166, 146, 89, 0, 0, 149,
	132, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 105, 152, 168, 143, 142, 158, 199, 0,
	0, 0, 0, 295, 0, 0, 0, 182, 0, 294,
	0, 0, 331, 190, 0, 0, 205, 196, 0, 0,
	0, 0, 324, 325, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 261, 312, 311, 313, 314, 315,
	316, 0, 0, 177, 317, 318, 319, 0, 0, 292,
	305, 0, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 630, 0, 0, 0, 342, 0,
	304, 0, 0, 301, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 340, 0,
	0, 201, 0, 0, 0, 178, 0, 204, 200, 214,
	173, 212, 207, 194, 186, 187, 172, 0, 203, 181,
	185, 180, 198, 209, 210, 179, 224, 176, 218, 175,
	0, 217, 197, 208, 213, 195, 192, 174, 211, 193,
	191, 188, 183, 0, 0, 0, 206, 215, 225, 0,
	0, 220, 221, 222, 332, 341, 338, 339, 336, 337,
	335, 334, 333, 343, 326, 327, 329, 0, 328, 171,
	0, 189, 223, 202, 184, 216, 199, 0, 0, 0,
	0, 295, 0, 0, 0, 182, 0, 294, 0, 0,
	331, 190, 0, 0, 205, 196, 0, 0, 0, 0,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 286, 261, 312, 311, 313, 314, 315, 316, 0,
	0, 177, 317, 318, 319, 0, 0, 292, 305, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 0, 0, 0, 0, 342, 0, 304, 0,
	0, 301, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 340, 0, 0, 201,
	0, 0, 0, 178, 0, 204, 200, 214, 173, 212,
	207, 194, 186, 187, 172, 0, 203, 181, 185, 180,
	198, 209, 210, 179, 224, 176, 218, 175, 0, 217,
	197, 208, 213, 195, 192, 174, 211, 193, 191, 188,
	183, 0, 0, 0, 206, 215, 225, 0, 0, 220,
	221, 222, 332, 341, 338, 339, 336, 337, 335, 334,
	333, 343, 326, 327, 329, 22, 328, 171, 0, 189,
	223, 202, 184, 216, 0, 0, 199, 0, 0, 0,
	0, 295, 0, 0, 0, 182, 0, 294, 0, 0,
	331, 190, 0, 0, 205, 196, 0, 0, 0, 0,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 261, 312, 311, 313, 314, 315, 316, 0,
	0, 177, 317, 318, 319, 0, 0, 292, 305, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 0, 0, 0, 0, 342, 0, 304, 0,
	0, 301, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 340, 0, 0, 201,
	0, 0, 0, 178, 0, 204, 200, 214, 173, 212,
	207, 194, 186, 187, 172, 0, 203, 181, 185, 180,
	198, 209, 210, 179, 224, 176, 218, 175, 0, 217,
	197, 208, 213, 195, 192, 174, 211, 193, 191, 188,
	183, 0, 0, 0, 206, 215, 225, 0, 0, 220,
	221, 222, 332, 341, 338, 339, 336, 337, 335, 334,
	333, 343, 326, 327, 329, 0, 328, 171, 0, 189,
	223, 202, 184, 216, 199, 0, 0, 0, 0, 295,
	0, 0, 0, 182, 0, 294, 0, 0, 331, 190,
	0, 0, 205, 196, 0, 0, 0, 0, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	261, 312, 311, 313, 314, 315, 316, 0, 0, 177,
	317, 318, 319, 0, 0, 292, 305, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	0, 0, 0, 0, 342, 0, 304, 0, 0, 301,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 340, 0, 0, 201, 0, 0,
	0, 178, 0, 204, 200, 214, 173, 212, 207, 194,
	186, 187, 172, 0, 203, 181, 185, 180, 198, 209,
	210, 179, 224, 176, 218, 175, 0, 217, 197, 208,
	213, 195, 192, 174, 211, 193, 191, 188, 183, 0,
	0, 0, 206, 215, 225, 0, 0, 220, 221, 222,
	332, 341, 338, 339, 336, 337, 335, 334, 333, 343,
	326, 327, 329, 199, 328, 171, 0, 189, 223, 202,
	184, 216, 182, 0, 0, 0, 0, 331, 190, 0,
	0, 205, 196, 0, 0, 0, 0, 324, 325, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 261,
	312, 311, 313, 314, 315, 316, 0, 0, 177, 317,
	318, 319, 0, 0, 0, 305, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 0,
	0, 0, 0, 342, 0, 304, 0, 0, 301, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 340, 0, 0, 201, 0, 0, 0,
	178, 0, 204, 200, 214, 173, 212, 207, 194, 186,
	187, 172, 0, 203, 181, 185, 180, 198, 209, 210,
	179, 224, 176, 218, 175, 0, 217, 197, 208, 213,
	195, 192, 174, 211, 193, 191, 188, 183, 0, 0,
	0, 206, 215, 225, 0, 0, 220, 221, 222, 332,
	341, 338, 339, 336, 337, 335, 334, 333, 343, 326,
	327, 329, 0, 328, 171, 0, 189, 223, 202, 184,
	216, 199, 0, 0, 0, 730, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 190, 0, 0, 205,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 500, 0, 732,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	418, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 178, 0,
	204, 200, 214, 173, 212, 207, 194, 186, 187, 172,
	0, 203, 181, 185, 180, 198, 209, 210, 179, 224,
	176, 218, 175, 0, 217, 197, 208, 213, 195, 192,
	174, 211, 193, 191, 188, 183, 0, 0, 0, 206,
	215, 225, 0, 22, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 171, 182, 189, 223, 202, 184, 216, 190,
	0, 0, 205, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 178, 0, 204, 200, 214, 173, 212, 207, 194,
	186, 187, 172, 0, 203, 181, 185, 180, 198, 209,
	210, 179, 224, 176, 218, 175, 0, 217, 197, 208,
	213, 195, 192, 174, 211, 193, 191, 188, 183, 0,
	0, 199, 206, 215, 225, 887, 0, 220, 221, 222,
	182, 0, 0, 0, 0, 0, 190, 0, 0, 205,
	196, 0, 0, 0, 0, 171, 0, 189, 223, 202,
	184, 216, 0, 0, 0, 0, 0, 227, 0, 889,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 178, 0,
	204, 200, 214, 173, 212, 207, 194, 186, 187, 172,
	0, 203, 181, 185, 180, 198, 209, 210, 179, 224,
	176, 218, 175, 0, 217, 197, 208, 213, 195, 192,
	174, 211, 193, 191, 188, 183, 0, 0, 0, 206,
	215, 225, 0, 22, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 171, 182, 189, 223, 202, 184, 216, 190,
	0, 0, 205, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 178, 0, 204, 200, 214, 173, 212, 207, 194,
	186, 187, 172, 0, 203, 181, 185, 180, 198, 209,
	210, 179, 224, 176, 218, 175, 0, 217, 197, 208,
	213, 195, 192, 174, 211, 193, 191, 188, 183, 0,
	0, 199, 206, 215, 225, 0, 0, 220, 221, 222,
	182, 0, 0, 0, 0, 0, 190, 0, 0, 205,
	196, 0, 0, 0, 0, 171, 0, 189, 223, 202,
	184, 216, 0, 0, 0, 0, 0, 227, 0, 889,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 178, 0,
	204, 200, 214, 173, 212, 207, 194, 186, 187, 172,
	0, 203, 181, 185, 180, 198, 209, 210, 179, 224,
	176, 218, 175, 0, 217, 197, 208, 213, 195, 192,
	174, 211, 193, 191, 188, 183, 0, 0, 199, 206,
	215, 225, 0, 0, 220, 221, 222, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 205, 196, 0, 0,
	0, 0, 171, 0, 189, 223, 202, 184, 216, 0,
	0, 47, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 178, 0, 204, 200, 214,
	173, 212, 207, 194, 186, 187, 172, 0, 203, 181,
	185, 180, 198, 209, 210, 179, 224, 176, 218, 175,
	0, 217, 197, 208, 213, 195, 192, 174, 211, 193,
	191, 188, 183, 0, 0, 199, 206, 215, 225, 0,
	0, 220, 221, 222, 182, 0, 0, 0, 0, 0,
	190, 0, 0, 205, 196, 0, 0, 0, 0, 171,
	0, 189, 223, 202, 184, 216, 0, 0, 0, 0,
	0, 500, 0, 732, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 178, 0, 204, 200, 214, 173, 212, 207,
	194, 186, 187, 172, 0, 203, 181, 185, 180, 198,
	209, 210, 179, 224, 176, 218, 175, 0, 217, 197,
	208, 213, 195, 192, 174, 211, 193, 191, 188, 183,
	0, 0, 0, 206, 215, 225, 199, 0, 220, 221,
	222, 0, 0, 0, 355, 182, 0, 0, 0, 0,
	0, 190, 0, 0, 205, 196, 171, 0, 189, 223,
	202, 184, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 178, 0, 204, 200, 214, 173, 212,
	207, 194, 186, 187, 172, 0, 203, 181, 185, 180,
	198, 209, 210, 179, 224, 176, 218, 175, 0, 217,
	197, 208, 213, 195, 192, 174, 211, 193, 191, 188,
	183, 0, 0, 199, 206, 215, 225, 0, 0, 220,
	221, 222, 182, 0, 0, 0, 0, 0, 190, 0,
	0, 205, 196, 0, 0, 0, 0, 171, 0, 189,
	223, 202, 184, 216, 0, 0, 0, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	178, 0, 204, 200, 214, 173, 212, 207, 194, 186,
	187, 172, 0, 203, 181, 185, 180, 198, 209, 210,
	179, 224, 176, 218, 175, 0, 217, 197, 208, 213,
	195, 192, 174, 211, 193, 191, 188, 183, 0, 0,
	199, 206, 215, 225, 0, 0, 220, 221, 222, 182,
	0, 0, 0, 0, 0, 190, 0, 0, 205, 196,
	0, 0, 0, 0, 171, 0, 189, 223, 202, 184,
	216, 0, 0, 0, 0, 0, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 178, 0, 204,
	200, 214, 173, 212, 207, 194, 186, 187, 172, 0,
	203, 181, 185, 180, 198, 209, 210, 179, 224, 176,
	218, 175, 0, 217, 197, 208, 213, 195, 192, 174,
	211, 193, 191, 188, 183, 0, 0, 199, 206, 215,
	225, 0, 0, 220, 221, 222, 182, 0, 0, 0,
	0, 0, 190, 0, 0, 205, 196, 0, 0, 0,
	0, 171, 0, 189, 223, 202, 184, 216, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 22, 45, 24, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	201, 0, 34, 0, 178, 47, 204, 200, 214, 173,
	212, 207, 194, 186, 187, 172, 0, 203, 181, 185,
	180, 198, 209, 210, 179, 224, 176, 218, 175, 0,
	217, 197, 208, 213, 195, 192, 174, 211, 193, 191,
	188, 183, 0, 0, 0, 206, 215, 225, 0, 0,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 29, 30, 0, 32, 0, 171, 0,
	189, 223, 202, 184, 216, 0, 33, 41, 36, 0,
	0, 42, 43, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	37, 38, 0, 39,
}
var yyPact = [...]int{

	5905, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	690, 733, -1000, -1000, -1000, -1000, -164, 500, -31, -18,
	-35, 6, 3, 3253, 5830, -1000, -1000, 229, -159, -1000,
	-1000, -1000, -1000, -1000, 517, -1000, -1000, -1000, -1000, -1000,
	685, 688, 529, 671, 572, -1000, -18, 5830, 719, 5683,
	5683, -142, 322, -21, 320, -21, 2, -1000, -23, 309,
	-23, 5830, 5830, -1000, 716, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 325, 652,
	3977, 3977, 690, -1000, 517, -1000, -1000, -1000, 620, -1000,
	-1000, 179, 5389, 623, 53, 5830, 398, -1000, 92, -1000,
	52, -1000, -1000, 398, 687, 469, -1000, 1002, 5830, 114,
	516, 5830, 5830, 5830, 661, 515, 5830, -1000, -1000, -1000,
	5830, 5830, 5830, -1000, -1000, -1000, -1000, -1000, 729, 73,
	400, -1000, 3977, 1288, 446, 446, -1000, -1000, 43, -1000,
	-1000, 4146, 4146, 4146, 4146, 4146, 4146, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	446, 51, -1000, 3799, 446, 446, 446, 446, 446, 446,
	3977, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 481, -1000, 278, 685, 325, 572,
	57, 534, -1000, -1000, 508, 5830, -1000, 5683, 3053, 714,
	5683, 3977, 2853, -148, 1853, 117, 212, -87, -1000, -1000,
	483, -1000, 483, 483, 483, 483, -62, -62, -62, -62,
	-1000, -1000, -1000, -1000, -1000, 499, -1000, 483, 483, 483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 492, 492,
	492, 484, 484, -1000, 627, 5830, -1000, 908, -1000, -1000,
	5830, -1000, -1000, -1000, -1000, -1000, 560, 3977, 3977, 359,
	3977, 3977, 82, 4146, 287, 94, 4146, 4146, 4146, 4146,
	4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146,
	4146, 244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	304, -1000, 517, 579, 579, 62, 62, 62, 62, 62,
	1169, 1428, 2853, 325, 429, 363, 3799, 3441, 3441, 3977,
	3977, 3441, 667, 97, 363, 5536, -1000, 325, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3441, 3441, 3441, 3441, 3977,
	-1000, -1000, -1000, 652, -1000, 667, 682, -1000, 617, 616,
	-1000, -1000, 3441, -1000, 504, 5683, 446, -1000, 4797, -1000,
	454, -1000, -1000, -1000, -1000, -1000, 690, 3977, -1000, 363,
	-1000, 49, -1000, -1000, 446, 478, 1653, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 491, 651, 120, 296, -1000, -1000,
	626, -1000, 143, -99, -1000, -1000, 228, -62, -62, -1000,
	-1000, 61, 622, 61, 61, 61, 264, -1000, -1000, -1000,
	-1000, 223, -1000, -1000, -1000, 201, -1000, -1000, 2253, -1000,
	139, 91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 593, 82, 172, -1000, -1000,
	259, -1000, -1000, 363, 363, 621, -1000, -1000, -1000, -1000,
	287, 4146, 4146, 4146, 571, 621, 986, 170, 701, 62,
	235, 235, 60, 60, 60, 60, 60, 195, 195, -1000,
	-1000, -1000, 325, -1000, -1000, -1000, 325, 3441, 474, -1000,
	-1000, 4324, 47, 446, -1000, 3977, -1000, 325, 408, 408,
	175, 391, 408, 3441, 160, -1000, 3977, 325, -1000, 408,
	325, 408, 408, -1000, -1000, 5830, -1000, -1000, -1000, -1000,
	489, -1000, 655, 433, 404, -1000, -1000, 3619, 325, 426,
	46, 690, 685, 363, 2653, 293, 1853, -1000, 1853, 5536,
	-1000, 290, -1000, -1000, -77, 445, -1000, -1000, -1000, 355,
	61, 61, -1000, 285, 123, -1000, -1000, -1000, 417, -1000,
	471, 411, -1000, -1000, -1000, -1000, 5830, -1000, -1000, -1000,
	-1000, -1000, 282, -1000, -1000, -1000, -1000, -1000, 571, 621,
	525, -1000, 4146, 4146, -1000, -1000, 408, 3441, -1000, -1000,
	5238, -1000, -1000, 2453, 3441, 363, -1000, -1000, -1000, 174,
	244, 174, -124, 459, 100, -1000, 3977, 275, -1000, -1000,
	-1000, -1000, -1000, -1000, 714, 5091, 646, -1000, 446, -1000,
	-1000, 532, 5536, 5536, 685, -1000, -1000, 325, 1653, -1000,
	374, -1000, 483, -1000, 118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 262, 190, -1000,
	187, -1000, -1000, -1000, -1000, 4146, 621, 621, -1000, -1000,
	-1000, -1000, 38, 325, 325, 483, 483, -1000, 483, 484,
	-1000, 483, -44, 483, -46, 325, 325, 446, -119, -1000,
	363, 3977, 708, 424, 559, -1000, -1000, -1000, 664, 4487,
	4634, 725, -1000, 446, -1000, 517, 36, -1000, -1000, 2253,
	-1000, 5536, -1000, 158, 644, -1000, 630, -1000, 352, 327,
	621, 2053, -1000, -1000, -1000, 44, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4146, 325, 248, 363, 693, 683,
	5091, 5091, 5091, 5091, -1000, 552, 544, -1000, 600, 586,
	604, 5830, -1000, 330, 4487, 58, -1000, 4944, -1000, -1000,
	5683, 404, 325, 5536, -1000, -1000, -1000, 245, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 40, -1000, -1000, -1000, 3977,
	3977, 559, 502, 988, -1000, -1000, -1000, -1000, 542, -1000,
	518, -1000, -1000, -1000, -1000, -1000, -2, -4, -10, -1000,
	398, -1000, -1000, -1000, 325, 30, -131, 363, 362, 3977,
	3977, -1000, -1000, 446, 446, 446, -1000, 591, -127, -137,
	363, 363, 5536, 5536, 5536, -1000, 557, -1000, 301, -1000,
	301, 301, -129, -1000, 5536, -1000, -1000, -135, -1000, -138,
	-1000,
}
var yyPgo = [...]int{

	0, 960, 959, 958, 952, 951, 950, 50, 418, 949,
	948, 947, 946, 943, 942, 941, 940, 938, 937, 934,
	929, 921, 920, 75, 919, 918, 917, 46, 916, 40,
	915, 913, 22, 108, 26, 42, 85, 910, 18, 19,
	7, 909, 908, 6, 904, 833, 898, 883, 880, 2,
	13, 878, 876, 870, 868, 43, 4, 867, 866, 865,
	864, 863, 862, 30, 3, 11, 23, 20, 860, 54,
	5, 859, 29, 858, 856, 854, 848, 27, 847, 38,
	846, 21, 37, 844, 33, 10, 47, 843, 221, 837,
	244, 305, 836, 835, 829, 91, 0, 9, 1, 31,
	828, 766, 17, 14, 823, 820, 80, 15, 24, 25,
	819, 817, 816, 814, 813, 811, 809, 172, 808, 807,
	41, 32, 806, 805, 52, 12, 804, 803, 787, 784,
	44, 783, 36, 781, 780, 754, 28, 16, 749, 8,
	748, 744, 742, 59, 107, 739, 152,
}
var yyR1 = [...]int{

	0, 141, 142, 142, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 14, 15, 15, 15,
	15, 18, 133, 134, 134, 134, 130, 111, 111, 111,
	114, 114, 112, 112, 112, 112, 112, 112, 112, 113,
	113, 113, 113, 113, 115, 115, 115, 115, 115, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 129, 129, 117, 117, 124, 124, 125,
	125, 125, 122, 122, 123, 123, 126, 126, 126, 118,
	118, 118, 118, 118, 127, 127, 120, 120, 120, 121,
	121, 128, 128, 128, 128, 128, 119, 119, 131, 138,
	138, 138, 138, 132, 132, 140, 140, 139, 135, 135,
	135, 136, 136, 136, 137, 137, 137, 16, 16, 16,
	16, 17, 17, 17, 1, 19, 2, 3, 4, 5,
	5, 110, 110, 110, 20, 20, 20, 20, 21, 22,
	22, 22, 22, 145, 23, 24, 24, 25, 25, 25,
	29, 29, 29, 27, 27, 28, 28, 34, 34, 33,
	33, 35, 35, 35, 35, 100, 100, 100, 99, 99,
	37, 37, 38, 38, 39, 39, 40, 40, 40, 47,
	41, 41, 41, 41, 105, 105, 104, 104, 104, 103,
	103, 42, 42, 42, 42, 43, 43, 43, 43, 44,
	44, 46, 46, 45, 45, 48, 48, 48, 48, 49,
	49, 50, 50, 36, 36, 36, 36, 36, 36, 36,
	89, 89, 52, 52, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 62, 62, 62, 62, 62, 62,
	53, 53, 53, 53, 53, 53, 53, 32, 32, 63,
	63, 63, 69, 64, 64, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 60, 60, 60, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 59, 59, 59,
	59, 59, 59, 59, 59, 146, 146, 61, 61, 61,
	61, 30, 30, 30, 30, 30, 108, 108, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 73, 73, 31, 31, 71, 71, 72, 74, 74,
	70, 70, 70, 55, 55, 55, 55, 55, 55, 55,
	57, 57, 57, 75, 75, 76, 76, 77, 77, 78,
	78, 79, 80, 80, 80, 81, 81, 81, 81, 82,
	82, 82, 54, 54, 54, 54, 54, 54, 83, 83,
	83, 83, 84, 84, 65, 65, 67, 67, 66, 68,
	85, 85, 86, 87, 87, 90, 90, 91, 91, 88,
	88, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 93, 93, 93, 94, 94, 97, 97, 98, 98,
	101, 101, 102, 102, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 143, 144, 106, 107, 107, 107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 3, 3, 2, 9, 4,
	6, 4, 4, 1, 3, 3, 7, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 4, 5, 4, 3, 3, 2, 2, 3, 3,
	2, 1, 1, 1, 3, 5, 5, 5, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -141, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 128, 111, 121, 47, 198, 123, 205, 206, 208,
	24, 122, 126, 127, -143, 7, 182, 50, -142, 210,
	-77, 14, -25, 5, -23, -145, -23, -23, -23, -23,
	209, -133, 50, 174, 113, 112, -88, 116, 112, 113,
	174, 112, 112, -110, 169, 107, 53, -95, -96, 67,
	21, 23, 163, 70, 102, 15, 71, 149, 101, 183,
	45, 175, 176, 173, 174, 168, 28, 9, 24, 122,
	20, 95, 109, 74, 75, 199, 125, 22, 123, 65,
	18, 48, 10, 12, 13, 117, 116, 86, 113, 43,
	7, 103, 25, 83, 39, 27, 41, 84, 16, 177,
	178, 30, 187, 97, 46, 33, 68, 63, 49, 66,
	14, 44, 203, 202, 85, 110, 182, 42, 6, 186,
	29, 121, 200, 40, 112, 73, 115, 64, 204, 5,
	118, 8, 47, 119, 179, 180, 181, 31, 201, 72,
	11, 188, 135, 129, 156, 148, 146, 62, 124, 144,
	140, 138, 26, 161, 193, 139, 133, 134, 160, 190,
	32, 159, 155, 158, 132, 154, 36, 151, 141, 17,
	127, 120, 192, 137, 126, 35, 165, 131, 152, 142,
	143, 157, 130, 153, 128, 166, 194, 150, 147, 114,
	170, 171, 172, 191, 145, 167, -101, 53, -96, -106,
	-106, 56, 207, -106, -106, -106, -106, -106, -7, -81,
	16, 15, -10, -8, -143, 6, 19, 20, -29, 37,
	38, -24, -88, -45, -101, 10, -85, -86, -70, -97,
	-101, 53, -96, -85, 195, -134, -130, 53, -91, 117,
	53, -91, 112, -90, 117, 53, -90, -45, -45, -106,
	10, 112, 174, -106, -106, -144, 52, -82, 18, 30,
	-36, -51, 68, -56, 28, 22, -55, -52, -70, -68,
	-69, 102, 91, 92, 99, 69, 103, -60, -58, -59,
	-61, 55, 54, 56, 57, 58, 59, 63, 64, 65,
	-97, -101, -66, -143, 41, 42, 183, 184, 187, 185,
	71, 31, 173, 181, 180, 179, 177, 178, 175, 176,
	117, 174, 97, 182, -78, -79, -36, -77, -7, -23,
	33, -27, 20, 61, -46, 25, -45, 29, 104, -45,
	51, 76, 104, 15, 52, 51, -111, -114, -116, -115,
	-112, -113, 146, 147, 102, 150, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 124, 142, 143, 144,
	145, 129, 130, 131, 132, 133, 134, 135, 137, 138,
	139, 140, 141, -101, 68, 49, -45, -45, -45, 22,
	49, -101, -45, -45, -45, 8, 86, 67, 66, 83,
	51, 17, -36, -53, 86, 68, 84, 85, 70, 88,
	87, 98, 91, 92, 93, 94, 95, 96, 97, 89,
	90, 101, 76, 77, 78, 79, 80, 81, 82, -89,
	-143, -69, -143, 105, 106, -56, -56, -56, -56, -56,
	-56, -143, 104, -7, -64, -36, -143, -143, -143, -143,
	-143, -143, -143, -73, -36, -143, -146, -143, -146, -146,
	-146, -146, -146, -146, -146, -143, -143, -143, -143, 51,
	-80, 23, 24, -81, -144, -29, -57, -97, 56, 59,
	53, -96, -28, 40, -54, 29, 31, -7, -143, -45,
	-85, -102, -101, -95, 107, 169, -50, 11, -86, -36,
	-98, -102, -97, -95, 197, -135, -136, -137, -98, 55,
	56, -95, -130, -131, -138, 120, 118, -132, 113, 27,
	-126, 63, 68, -122, 166, -117, 50, -117, -117, -117,
	-117, -120, 149, -120, -120, -120, 50, -117, -117, -117,
	-124, 50, -124, -124, -125, 50, -125, 22, -45, -92,
	110, 53, 108, 163, 149, 62, 28, 109, 14, 183,
	194, -45, -106, -106, -106, 35, -36, -36, -62, 63,
	68, 64, 65, -36, -36, -56, -63, -66, -69, 60,
	86, 84, 85, 70, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -108,
	53, 55, 53, -55, -55, -97, -34, 20, -33, -35,
	93, -36, -101, -98, -144, 51, -144, -7, -33, -33,
	-36, -36, -33, -27, -71, -72, 72, -97, -144, -33,
	-34, -33, -33, -79, -82, -87, 18, 10, 31, 31,
	-33, -84, 49, -85, -65, -67, -66, -143, -7, -83,
	-97, -50, -77, -36, 104, -143, 51, -137, 76, 50,
	27, -132, 53, 53, -118, 28, 63, -123, 167, 56,
	-120, -120, -121, 101, 29, -121, -121, -121, -129, 55,
	56, 56, -107, -143, -98, -106, -93, -94, 115, 21,
	113, 27, 76, 36, 63, 64, 65, -63, -56, -56,
	-56, -32, 125, 67, -144, -144, -33, 51, -100, -99,
	21, -97, 55, 104, -143, -36, -144, -144, -144, 51,
	119, 21, -144, -33, -74, -72, 74, -36, -144, -144,
	-144, -144, -144, -45, -37, 10, 26, -84, 51, -144,
	-144, -144, 51, 104, -77, -81, -98, 53, -136, -137,
	-140, -139, -97, 53, -127, 163, 55, 56, 57, 63,
	52, -121, -121, 53, 53, 102, 52, 51, 51, 52,
	51, -45, -106, 53, -32, 67, -56, -56, -144, -35,
	-99, 93, -102, -34, -109, 102, 146, 124, 144, 140,
	160, 151, 165, 142, 166, -108, -109, 188, -77, 75,
	-36, 73, -50, -38, -39, -40, -41, -47, -69, -143,
	-45, 27, -67, 31, -7, -143, -97, -97, -81, -144,
	52, 51, -117, -128, 120, 27, 118, 55, 56, 56,
	-56, 104, -144, -144, -117, -117, -117, -125, -117, 134,
	-117, 134, -144, -144, -143, -31, 186, -36, -75, 12,
	51, -42, -43, -44, 39, 43, 45, 40, 41, 42,
	46, -105, 21, -38, -143, -104, -103, 21, -101, 55,
	8, -65, -7, 104, -107, -139, -119, 62, 27, 27,
	52, 52, 93, -120, 53, -56, -144, 55, -76, 13,
	15, -39, -40, -39, -40, 39, 39, 39, 44, 39,
	44, 39, -43, -101, -144, -48, 47, 116, 48, -103,
	-85, -144, -97, 55, -30, 86, 191, -36, -64, 49,
	49, 39, 39, 113, 113, 113, -144, 189, 46, 192,
	-36, -36, -143, -143, -143, 36, 190, 193, -49, -97,
	-49, -49, 36, -144, 51, -144, -144, 191, -97, 192,
	193,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	377, 0, 163, 163, 163, 163, 163, 0, 0, 419,
	0, 0, 0, 0, 0, 595, 595, 0, 0, 595,
	595, 595, 595, 595, 0, 31, 32, 593, 1, 3,
	385, 0, 0, 167, 170, 165, 419, 0, 0, 0,
	0, 37, 0, 417, 0, 417, 0, 420, 415, 0,
	415, 0, 0, 595, 521, 455, 151, 152, 153, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 158, 440, 441, 146,
	147, 595, 595, 150, 159, 160, 161, 162, 25, 389,
	0, 0, 377, 27, 0, 163, 168, 169, 173, 171,
	172, 164, 0, 0, 223, 0, 35, 410, 0, 360,
	0, -2, -2, 36, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 145, 154,
	0, 0, 0, 148, 149, 26, 594, 21, 0, 0,
	386, 233, 0, 238, 240, 0, 275, 276, 277, 278,
	279, 0, 0, 0, 0, 0, 0, 301, 302, 303,
	304, 363, 364, 365, 366, 367, 368, 369, 242, 243,
	360, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 325, 325, 325, 325, 325, 325, 325, 325,
	0, 0, 0, 0, 378, 379, 382, 385, 25, 170,
	0, 175, 174, 166, 0, 0, 222, 0, 0, 231,
	0, 0, 0, 0, 128, 0, 96, 92, 48, 49,
	85, 51, 85, 85, 85, 85, 106, 106, 106, 106,
	77, 78, 79, 80, 81, 0, 64, 85, 85, 85,
	68, 52, 53, 54, 55, 56, 57, 58, 87, 87,
	87, 89, 89, 39, 0, 0, 41, 0, 141, 416,
	0, 143, 595, 595, 595, 390, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 266, 239,
	0, 253, 0, 0, 0, 295, 296, 297, 298, 299,
	0, 177, 0, 25, 0, 273, 0, 0, 0, 0,
	0, 0, 173, 0, 352, 0, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 0, 177, 0, 0, 0,
	381, 383, 384, 389, 28, 173, 0, 370, 0, 0,
	436, 437, 0, 176, 402, 0, 0, -2, 0, 221,
	231, 224, 442, 443, 455, 521, 377, 0, 411, 412,
	361, 0, 438, -2, 0, 42, 129, 131, 134, 135,
	136, 439, 44, 45, 0, 0, 0, 0, 123, 124,
	99, 97, 0, 94, 93, 50, 0, 106, 106, 71,
	72, 109, 0, 109, 109, 109, 0, 65, 66, 67,
	59, 0, 60, 61, 62, 0, 63, 418, 596, 595,
	431, 430, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 142, 155, 156, 157, 0, 234, 235, 237, 254,
	0, 256, 258, 387, 388, 244, 245, 269, 270, 271,
	0, 0, 0, 0, 267, 249, 0, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 294,
	336, 337, 0, 292, 293, 300, 0, 0, 178, 179,
	181, 185, 0, 361, 272, 0, 408, 25, 0, 0,
	0, 0, 0, 0, 358, 355, 0, 0, 326, 0,
	0, 0, 0, 380, 22, 0, 413, 414, 371, 372,
	190, 29, 0, 402, 392, 404, 406, 0, 25, 0,
	398, 377, 385, 232, 0, 0, 0, 132, 0, 0,
	119, 0, 121, 122, 104, 0, 98, 47, 95, 0,
	109, 109, 73, 0, 0, 74, 75, 76, 0, 83,
	0, 0, 40, 597, 598, 137, 0, 595, 432, 433,
	434, 435, 0, 391, 255, 257, 259, 246, 267, 250,
	0, 247, 0, 0, 241, 305, 0, 0, 182, 186,
	0, 188, 189, 0, 177, 274, -2, 308, 309, 0,
	0, 0, 0, 377, 0, 356, 0, 0, 316, 327,
	328, 329, 330, 23, 231, 0, 0, 30, 0, 407,
	-2, 0, 0, 0, 385, 34, 362, 0, 130, 133,
	0, 125, 85, 120, 111, 105, 100, 101, 102, 103,
	86, 69, 70, 110, 107, 108, 82, 0, 0, 90,
	0, 138, 139, 140, 248, 0, 268, 251, 306, 180,
	187, 183, 0, 0, 0, 85, 85, 341, 85, 89,
	344, 85, 346, 85, 349, 0, 0, 0, 353, 315,
	359, 0, 373, 191, 192, 194, 195, 196, 204, 0,
	206, 0, 405, 0, -2, 0, 400, 399, 33, 596,
	118, 0, 127, 116, 0, 113, 115, 84, 0, 0,
	252, 0, 307, 310, 338, 106, 342, 343, 345, 347,
	348, 350, 312, 311, 0, 0, 0, 357, 375, 0,
	0, 0, 0, 0, 211, 0, 0, 214, 0, 0,
	0, 0, 205, 0, 0, 225, 207, 0, 209, 210,
	0, 395, 25, 0, 38, 126, 46, 0, 112, 114,
	88, 91, 184, 339, 340, 331, 314, 354, 24, 0,
	0, 193, 200, 0, 203, 212, 213, 215, 0, 217,
	0, 219, 220, 197, 198, 199, 0, 0, 0, 208,
	403, -2, 401, 117, 0, 0, 0, 376, 374, 0,
	0, 216, 218, 0, 0, 0, 313, 0, 0, 0,
	201, 202, 0, 0, 0, 332, 0, 335, 0, 229,
	0, 0, 333, 226, 0, 227, 228, 0, 230, 0,
	334,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 210,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:263
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:268
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:269
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:295
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:303
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:341
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:364
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:374
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Set{Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:396
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:402
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &DDL{Action: CreateDBStr, Database: yyDollar[4].tableIdent}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:413
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:420
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:427
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:439
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:443
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:449
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:459
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:469
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:632
		{
			yyVAL.optVal = nil
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:636
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:641
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:645
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:653
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:663
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:671
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:690
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:703
		{
			yyVAL.optVal = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:711
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:715
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:724
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:733
		{
			yyVAL.str = ""
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:737
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:741
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:746
		{
			yyVAL.str = ""
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:767
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.optVal = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:786
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:796
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:824
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:839
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:843
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:859
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:879
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:883
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:893
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:899
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:907
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:912
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:934
		{
			yyVAL.statement = &Xa{}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &Explain{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:975
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:985
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:989
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:999
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.statement = &OtherRead{}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &OtherRead{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
			setAllowComments(yylex, true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.bytes2 = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.str = UnionStr
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.str = UnionAllStr
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.str = UnionDistinctStr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.str = SQLCacheStr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = DistinctStr
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.str = StraightJoinHint
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.selectExprs = nil
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.empty = struct{}{}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.str = JoinStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.str = JoinStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.str = JoinStr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.str = StraightJoinStr
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = LeftJoinStr
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.str = LeftJoinStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = RightJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.str = RightJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.str = NaturalJoinStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1277
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.indexHints = nil
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.expr = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = IsNullStr
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = IsNotNullStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.str = IsTrueStr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.str = IsNotTrueStr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.str = IsFalseStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.str = IsNotFalseStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = EqualStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = LessThanStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = GreaterThanStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = LessEqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = GreaterEqualStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = NotEqualStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.expr = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1644
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = BooleanModeStr
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.str = QueryExpansionStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.expr = nil
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = string("")
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &NullVal{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1961
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.exprs = nil
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.orderBy = nil
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.str = AscScr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.str = AscScr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.str = DescScr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.limit = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.str = ForUpdateStr
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.str = ShareModeStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2094
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.updateExprs = nil
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.byt = 0
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.byt = 1
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.str = IgnoreStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2437
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			decNesting(yylex)
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2451
		{
			forceEOF(yylex)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2456
		{
			forceEOF(yylex)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			forceEOF(yylex)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
