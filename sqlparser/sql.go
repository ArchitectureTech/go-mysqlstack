//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const ADD = 57437
const MODIFY = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const COLUMN = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const BIT = 57457
const TINYINT = 57458
const SMALLINT = 57459
const MEDIUMINT = 57460
const INT = 57461
const INTEGER = 57462
const BIGINT = 57463
const INTNUM = 57464
const REAL = 57465
const DOUBLE = 57466
const FLOAT_TYPE = 57467
const DECIMAL = 57468
const NUMERIC = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const CHARSET = 57480
const TEXT = 57481
const TINYTEXT = 57482
const MEDIUMTEXT = 57483
const LONGTEXT = 57484
const BLOB = 57485
const TINYBLOB = 57486
const MEDIUMBLOB = 57487
const LONGBLOB = 57488
const JSON = 57489
const ENUM = 57490
const NULLX = 57491
const AUTO_INCREMENT = 57492
const APPROXNUM = 57493
const SIGNED = 57494
const UNSIGNED = 57495
const ZEROFILL = 57496
const DATABASES = 57497
const TABLES = 57498
const VITESS_KEYSPACES = 57499
const VITESS_SHARDS = 57500
const VSCHEMA_TABLES = 57501
const WARNINGS = 57502
const VARIABLES = 57503
const CURRENT_TIMESTAMP = 57504
const DATABASE = 57505
const CURRENT_DATE = 57506
const CURRENT_TIME = 57507
const LOCALTIME = 57508
const LOCALTIMESTAMP = 57509
const UTC_DATE = 57510
const UTC_TIME = 57511
const UTC_TIMESTAMP = 57512
const REPLACE = 57513
const CONVERT = 57514
const CAST = 57515
const GROUP_CONCAT = 57516
const SEPARATOR = 57517
const MATCH = 57518
const AGAINST = 57519
const BOOLEAN = 57520
const LANGUAGE = 57521
const WITH = 57522
const QUERY = 57523
const EXPANSION = 57524
const UNUSED = 57525
const PARTITION = 57526
const PARTITIONS = 57527
const HASH = 57528
const XA = 57529
const ENGINES = 57530
const STATUS = 57531
const VERSIONS = 57532
const PROCESSLIST = 57533
const QUERYZ = 57534
const TXNZ = 57535
const KILL = 57536
const START = 57537
const TRANSACTION = 57538
const COMMIT = 57539
const SESSION = 57540
const ENGINE = 57541

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"STATUS",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"ENGINE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 341,
	104, 443,
	-2, 439,
	-1, 342,
	104, 444,
	-2, 440,
	-1, 503,
	5, 25,
	-2, 396,
	-1, 629,
	104, 446,
	-2, 442,
	-1, 740,
	5, 26,
	-2, 275,
	-1, 764,
	5, 26,
	-2, 397,
	-1, 847,
	5, 25,
	-2, 399,
	-1, 949,
	5, 26,
	-2, 400,
}

const yyPrivate = 57344

const yyLast = 5950

var yyAct = [...]int{

	342, 460, 977, 624, 838, 902, 295, 506, 319, 779,
	700, 660, 626, 837, 888, 242, 554, 661, 297, 817,
	516, 899, 732, 724, 541, 612, 622, 60, 657, 50,
	261, 619, 690, 507, 79, 231, 284, 627, 641, 589,
	293, 527, 344, 350, 550, 703, 282, 251, 49, 571,
	320, 44, 54, 521, 235, 518, 259, 989, 231, 317,
	976, 988, 968, 570, 986, 975, 967, 830, 882, 459,
	3, 231, 231, 67, 68, 276, 56, 57, 58, 78,
	64, 63, 686, 59, 534, 783, 675, 853, 573, 22,
	45, 24, 25, 802, 922, 44, 542, 569, 715, 877,
	875, 714, 621, 247, 713, 860, 743, 40, 269, 944,
	946, 264, 26, 66, 241, 712, 529, 964, 963, 232,
	233, 414, 413, 236, 237, 238, 239, 240, 472, 962,
	34, 267, 529, 47, 708, 71, 70, 909, 415, 69,
	710, 277, 680, 566, 564, 560, 62, 563, 565, 449,
	450, 867, 767, 738, 818, 736, 274, 670, 262, 278,
	279, 458, 954, 426, 425, 435, 436, 428, 429, 430,
	431, 432, 433, 434, 427, 357, 744, 437, 843, 820,
	945, 430, 431, 432, 433, 434, 427, 568, 792, 437,
	28, 29, 30, 542, 32, 822, 691, 826, 861, 821,
	859, 819, 567, 437, 528, 412, 824, 33, 41, 36,
	487, 488, 42, 43, 31, 966, 823, 596, 413, 415,
	528, 825, 827, 427, 562, 526, 437, 525, 709, 911,
	707, 594, 595, 593, 415, 572, 256, 793, 414, 413,
	776, 711, 676, 669, 535, 834, 832, 287, 345, 272,
	273, 561, 642, 414, 413, 415, 231, 417, 745, 231,
	268, 642, 400, 750, 231, 684, 914, 231, 231, 231,
	415, 46, 231, 955, 352, 346, 231, 231, 231, 428,
	429, 430, 431, 432, 433, 434, 427, 35, 864, 437,
	863, 416, 263, 418, 37, 38, 952, 39, 44, 414,
	413, 348, 47, 414, 413, 854, 414, 413, 582, 584,
	585, 447, 592, 583, 951, 699, 415, 347, 280, 281,
	415, 531, 698, 415, 461, 687, 532, 717, 718, 719,
	271, 470, 435, 436, 428, 429, 430, 431, 432, 433,
	434, 427, 446, 448, 437, 784, 785, 786, 65, 613,
	497, 614, 925, 787, 234, 231, 862, 266, 231, 697,
	983, 283, 489, 508, 886, 283, 631, 919, 457, 856,
	855, 462, 463, 464, 465, 466, 467, 468, 262, 471,
	473, 473, 473, 473, 473, 473, 473, 473, 481, 482,
	483, 484, 522, 804, 490, 511, 491, 801, 543, 544,
	545, 791, 231, 513, 504, 255, 781, 231, 777, 493,
	730, 283, 798, 797, 20, 556, 509, 579, 580, 773,
	586, 587, 681, 503, 795, 794, 766, 283, 283, 590,
	631, 283, 668, 615, 355, 361, 360, 358, 270, 591,
	552, 553, 265, 918, 917, 402, 403, 404, 788, 51,
	658, 762, 668, 886, 408, 409, 410, 497, 22, 474,
	475, 476, 477, 478, 479, 480, 461, 246, 796, 636,
	637, 730, 497, 22, 426, 425, 435, 436, 428, 429,
	430, 431, 432, 433, 434, 427, 730, 485, 437, 345,
	616, 617, 575, 576, 577, 47, 501, 958, 502, 44,
	536, 555, 47, 248, 629, 497, 630, 632, 508, 659,
	759, 662, 639, 462, 646, 725, 618, 47, 628, 61,
	644, 672, 677, 551, 546, 517, 650, 667, 649, 22,
	658, 643, 633, 505, 426, 425, 435, 436, 428, 429,
	430, 431, 432, 433, 434, 427, 671, 47, 437, 499,
	406, 730, 401, 663, 846, 44, 961, 960, 934, 497,
	933, 509, 688, 689, 666, 668, 634, 635, 679, 673,
	638, 702, 981, 47, 664, 974, 693, 694, 695, 939,
	558, 894, 895, 937, 645, 574, 647, 648, 938, 716,
	425, 435, 436, 428, 429, 430, 431, 432, 433, 434,
	427, 656, 590, 437, 890, 893, 894, 895, 891, 701,
	892, 896, 591, 537, 538, 539, 540, 935, 628, 578,
	655, 290, 936, 252, 253, 497, 654, 865, 547, 548,
	549, 351, 692, 720, 356, 739, 309, 308, 310, 311,
	312, 313, 775, 704, 349, 314, 751, 890, 893, 894,
	895, 891, 231, 892, 896, 683, 285, 959, 916, 915,
	844, 678, 727, 760, 557, 405, 728, 461, 286, 898,
	249, 250, 351, 770, 243, 508, 928, 737, 497, 749,
	740, 741, 742, 771, 734, 746, 359, 772, 761, 244,
	752, 653, 753, 754, 755, 756, 51, 768, 927, 652,
	885, 517, 769, 275, 258, 906, 231, 411, 53, 55,
	763, 764, 765, 48, 1, 778, 629, 524, 519, 260,
	523, 789, 790, 729, 696, 858, 782, 530, 509, 318,
	628, 685, 533, 674, 497, 520, 774, 780, 913, 497,
	682, 803, 747, 364, 365, 806, 805, 363, 367, 366,
	362, 816, 72, 897, 833, 901, 812, 811, 731, 706,
	231, 705, 559, 445, 229, 829, 651, 497, 497, 815,
	828, 662, 665, 486, 814, 343, 810, 831, 841, 835,
	845, 836, 629, 926, 851, 884, 748, 257, 469, 640,
	800, 296, 581, 734, 307, 304, 628, 306, 628, 305,
	257, 257, 492, 500, 419, 294, 288, 943, 840, 353,
	842, 889, 887, 663, 839, 758, 848, 881, 953, 498,
	852, 23, 52, 254, 19, 14, 849, 850, 13, 12,
	757, 27, 10, 9, 8, 847, 7, 6, 883, 873,
	5, 4, 245, 231, 231, 21, 2, 18, 17, 16,
	15, 11, 0, 497, 0, 662, 0, 497, 907, 0,
	0, 841, 868, 910, 869, 702, 912, 0, 497, 0,
	0, 0, 0, 0, 0, 878, 879, 0, 0, 0,
	816, 880, 0, 0, 799, 0, 0, 231, 231, 231,
	231, 0, 930, 900, 932, 0, 921, 663, 231, 44,
	929, 231, 931, 701, 231, 841, 841, 841, 841, 947,
	497, 940, 628, 508, 948, 0, 780, 0, 908, 841,
	451, 452, 453, 454, 455, 456, 0, 628, 924, 0,
	957, 956, 461, 0, 0, 0, 0, 842, 842, 842,
	842, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 900, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 969, 970, 0, 0, 509, 0, 0, 950,
	633, 0, 497, 497, 497, 979, 980, 0, 0, 0,
	0, 0, 0, 0, 497, 257, 0, 0, 257, 0,
	0, 0, 0, 399, 0, 0, 257, 257, 257, 0,
	965, 407, 0, 0, 0, 257, 257, 257, 0, 0,
	0, 0, 0, 971, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 857, 984, 985, 0, 0,
	0, 978, 978, 978, 0, 0, 0, 0, 0, 0,
	0, 588, 0, 987, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 0,
	370, 0, 0, 870, 871, 0, 872, 0, 0, 874,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 382, 510, 512, 0, 0,
	387, 388, 389, 390, 391, 392, 393, 0, 394, 395,
	396, 397, 398, 383, 384, 385, 386, 368, 369, 0,
	0, 371, 0, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 202, 0, 0, 620, 0, 292,
	0, 257, 0, 184, 0, 291, 257, 0, 328, 193,
	0, 0, 208, 199, 0, 0, 0, 0, 321, 322,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	341, 309, 308, 310, 311, 312, 313, 0, 0, 179,
	314, 315, 316, 0, 0, 289, 302, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 512, 0,
	0, 0, 0, 625, 625, 0, 0, 625, 299, 300,
	623, 0, 0, 0, 339, 0, 301, 0, 0, 298,
	303, 625, 625, 625, 625, 0, 721, 722, 723, 0,
	0, 0, 0, 222, 0, 0, 337, 0, 625, 204,
	0, 510, 0, 0, 180, 0, 207, 203, 217, 175,
	215, 210, 197, 189, 190, 174, 0, 206, 183, 188,
	182, 201, 212, 213, 181, 227, 178, 221, 177, 0,
	220, 200, 0, 211, 216, 198, 195, 176, 214, 196,
	194, 191, 185, 0, 0, 0, 209, 218, 228, 0,
	0, 223, 224, 225, 0, 0, 329, 338, 335, 336,
	333, 334, 332, 331, 330, 340, 323, 324, 326, 0,
	325, 173, 0, 192, 226, 205, 187, 219, 421, 0,
	424, 0, 0, 0, 0, 0, 438, 439, 440, 441,
	442, 443, 444, 186, 422, 423, 420, 426, 425, 435,
	436, 428, 429, 430, 431, 432, 433, 434, 427, 0,
	0, 437, 0, 0, 0, 0, 0, 808, 809, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 426, 425, 435, 436, 428, 429, 430, 431,
	432, 433, 434, 427, 0, 0, 437, 0, 510, 0,
	512, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 193, 0, 0, 208,
	199, 0, 0, 0, 0, 0, 0, 726, 0, 866,
	0, 0, 0, 0, 0, 257, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 426, 425, 435,
	436, 428, 429, 430, 431, 432, 433, 434, 427, 0,
	625, 437, 0, 0, 0, 0, 512, 625, 0, 0,
	0, 426, 425, 435, 436, 428, 429, 430, 431, 432,
	433, 434, 427, 0, 0, 437, 0, 0, 0, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 923, 0, 0, 0, 204, 0, 0, 0,
	0, 180, 0, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 0, 220, 200, 0,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 0, 0, 209, 218, 228, 0, 0, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 904, 0, 0, 0, 0, 173, 0,
	192, 226, 205, 187, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 257, 257, 257,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	257, 0, 0, 904, 0, 0, 510, 161, 150, 122,
	163, 99, 114, 172, 115, 116, 142, 86, 130, 202,
	112, 0, 102, 81, 109, 82, 100, 124, 184, 127,
	98, 152, 133, 169, 193, 137, 0, 208, 199, 0,
	0, 126, 155, 128, 149, 121, 143, 92, 136, 164,
	113, 140, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 139, 159, 111, 141, 80,
	138, 0, 84, 87, 171, 157, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 125, 129, 146, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 135,
	0, 0, 0, 90, 85, 123, 0, 0, 0, 74,
	0, 104, 147, 0, 0, 0, 156, 120, 222, 158,
	118, 117, 162, 165, 204, 0, 153, 101, 110, 180,
	108, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 88, 220, 200, 89, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 83,
	0, 209, 218, 228, 97, 73, 223, 224, 225, 75,
	76, 95, 96, 93, 94, 131, 132, 166, 167, 168,
	148, 91, 0, 0, 151, 134, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 0, 107, 154, 170,
	145, 144, 160, 0, 0, 0, 0, 0, 186, 161,
	150, 122, 163, 99, 114, 172, 115, 116, 142, 86,
	130, 202, 112, 0, 102, 81, 109, 82, 100, 124,
	184, 127, 98, 152, 133, 169, 193, 137, 0, 208,
	199, 0, 0, 126, 155, 128, 149, 121, 143, 92,
	136, 164, 113, 140, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 139, 159, 111,
	141, 80, 138, 0, 84, 87, 171, 157, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 125, 129, 146,
	119, 0, 0, 0, 0, 0, 0, 920, 0, 103,
	0, 135, 0, 0, 0, 90, 85, 123, 0, 0,
	0, 514, 0, 104, 147, 0, 0, 0, 156, 120,
	222, 158, 118, 117, 162, 165, 204, 0, 153, 101,
	110, 180, 108, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 88, 220, 200, 89,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 83, 0, 209, 218, 228, 97, 515, 223, 224,
	225, 0, 0, 95, 96, 93, 94, 131, 132, 166,
	167, 168, 148, 91, 0, 0, 151, 134, 173, 0,
	192, 226, 205, 187, 219, 0, 0, 0, 0, 107,
	154, 170, 145, 144, 160, 0, 0, 0, 0, 0,
	186, 161, 150, 122, 163, 99, 114, 172, 115, 116,
	142, 86, 130, 202, 112, 0, 102, 81, 109, 82,
	100, 124, 184, 127, 98, 152, 133, 169, 193, 137,
	0, 208, 199, 0, 0, 126, 155, 128, 149, 121,
	143, 92, 136, 164, 113, 140, 47, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 139,
	159, 111, 141, 80, 138, 0, 84, 87, 171, 157,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 125,
	129, 146, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 135, 0, 0, 0, 90, 85, 123,
	0, 0, 0, 514, 0, 104, 147, 0, 0, 0,
	156, 120, 222, 158, 118, 117, 162, 165, 204, 0,
	153, 101, 110, 180, 108, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 88, 220,
	200, 89, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 83, 0, 209, 218, 228, 97, 515,
	223, 224, 225, 0, 0, 95, 96, 93, 94, 131,
	132, 166, 167, 168, 148, 91, 0, 0, 151, 134,
	173, 0, 192, 226, 205, 187, 219, 0, 0, 0,
	0, 107, 154, 170, 145, 144, 160, 0, 0, 0,
	0, 0, 186, 161, 150, 122, 163, 99, 114, 172,
	115, 116, 142, 86, 130, 202, 112, 0, 102, 81,
	109, 82, 100, 124, 184, 127, 98, 152, 133, 169,
	193, 137, 0, 208, 199, 0, 0, 126, 155, 128,
	149, 121, 143, 92, 136, 164, 113, 140, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 139, 159, 111, 141, 80, 138, 0, 84, 87,
	171, 157, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 125, 129, 146, 119, 0, 0, 0, 0, 0,
	0, 813, 0, 103, 0, 135, 0, 0, 0, 90,
	85, 123, 0, 0, 0, 514, 0, 104, 147, 0,
	0, 0, 156, 120, 222, 158, 118, 117, 162, 165,
	204, 0, 153, 101, 110, 180, 108, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 0, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	88, 220, 200, 89, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 83, 0, 209, 218, 228,
	97, 515, 223, 224, 225, 0, 0, 95, 96, 93,
	94, 131, 132, 166, 167, 168, 148, 91, 0, 0,
	151, 134, 173, 0, 192, 226, 205, 187, 219, 0,
	0, 0, 0, 107, 154, 170, 145, 144, 160, 0,
	0, 0, 0, 0, 186, 161, 150, 122, 163, 99,
	114, 172, 115, 116, 142, 86, 130, 202, 112, 0,
	102, 81, 109, 82, 100, 124, 184, 127, 98, 152,
	133, 169, 193, 137, 0, 208, 199, 0, 0, 126,
	155, 128, 149, 121, 143, 92, 136, 164, 113, 140,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 139, 159, 111, 141, 80, 138, 0,
	84, 87, 171, 157, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 125, 129, 146, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 135, 0, 0,
	0, 90, 85, 123, 0, 0, 0, 514, 0, 104,
	147, 0, 0, 0, 156, 120, 222, 158, 118, 117,
	162, 165, 204, 0, 153, 101, 110, 180, 108, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 88, 220, 200, 89, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 83, 0, 209,
	218, 228, 97, 515, 223, 224, 225, 0, 0, 95,
	96, 93, 94, 131, 132, 166, 167, 168, 148, 91,
	0, 0, 151, 134, 173, 0, 192, 226, 205, 187,
	219, 0, 0, 0, 0, 107, 154, 170, 145, 144,
	160, 0, 0, 0, 0, 0, 186, 161, 150, 122,
	163, 99, 114, 172, 115, 116, 142, 86, 130, 202,
	112, 0, 102, 81, 109, 82, 100, 124, 184, 127,
	98, 152, 133, 169, 193, 137, 0, 208, 199, 0,
	0, 126, 155, 128, 149, 121, 143, 92, 136, 164,
	113, 140, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 139, 159, 111, 141, 80,
	138, 0, 84, 87, 171, 157, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 125, 129, 146, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 135,
	0, 0, 0, 90, 85, 123, 0, 0, 0, 514,
	0, 104, 147, 0, 0, 0, 156, 120, 222, 158,
	118, 117, 162, 165, 204, 0, 153, 101, 110, 180,
	108, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 88, 220, 200, 89, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 83,
	0, 209, 218, 228, 97, 515, 223, 224, 225, 0,
	0, 95, 96, 93, 94, 131, 132, 166, 167, 168,
	148, 91, 0, 0, 151, 134, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 0, 107, 154, 170,
	145, 144, 160, 0, 0, 0, 0, 0, 186, 161,
	150, 122, 163, 99, 114, 172, 115, 116, 142, 86,
	130, 202, 112, 0, 102, 81, 109, 82, 100, 124,
	184, 127, 98, 152, 133, 169, 193, 137, 0, 208,
	199, 0, 0, 126, 155, 128, 149, 121, 143, 92,
	136, 164, 113, 140, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 139, 159, 111,
	141, 80, 138, 0, 84, 87, 171, 157, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 125, 129, 146,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 135, 0, 0, 0, 90, 85, 123, 0, 0,
	0, 514, 0, 104, 147, 0, 0, 0, 156, 120,
	222, 158, 118, 117, 162, 165, 204, 0, 153, 101,
	110, 180, 108, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 88, 220, 200, 89,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 83, 0, 209, 218, 228, 97, 515, 223, 224,
	225, 0, 0, 95, 96, 93, 94, 131, 132, 166,
	167, 168, 148, 91, 0, 0, 151, 134, 173, 0,
	192, 226, 205, 187, 219, 0, 0, 0, 0, 107,
	154, 170, 145, 144, 160, 0, 202, 0, 0, 0,
	186, 292, 0, 0, 0, 184, 0, 291, 0, 0,
	328, 193, 0, 0, 208, 199, 0, 0, 0, 0,
	321, 322, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 341, 309, 308, 310, 311, 312, 313, 0,
	0, 179, 314, 315, 316, 0, 0, 289, 302, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 300, 623, 0, 0, 0, 339, 0, 301, 0,
	0, 298, 303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 337, 0,
	0, 204, 0, 0, 0, 0, 180, 0, 207, 203,
	217, 175, 215, 210, 197, 189, 190, 174, 0, 206,
	183, 188, 182, 201, 212, 213, 181, 227, 178, 221,
	177, 0, 220, 200, 0, 211, 216, 198, 195, 176,
	214, 196, 194, 191, 185, 0, 0, 0, 209, 218,
	228, 0, 0, 223, 224, 225, 0, 0, 329, 338,
	335, 336, 333, 334, 332, 331, 330, 340, 323, 324,
	326, 0, 325, 173, 0, 192, 226, 205, 187, 219,
	0, 0, 202, 0, 0, 0, 0, 292, 0, 0,
	0, 184, 0, 291, 0, 186, 328, 193, 0, 0,
	208, 199, 0, 0, 0, 0, 321, 322, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 283, 341, 309,
	308, 310, 311, 312, 313, 0, 0, 179, 314, 315,
	316, 0, 0, 289, 302, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 300, 0, 0,
	0, 0, 339, 0, 301, 0, 0, 298, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 337, 0, 0, 204, 0, 0,
	0, 0, 180, 0, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 0, 220, 200,
	0, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 0, 0, 209, 218, 228, 0, 0, 223,
	224, 225, 0, 0, 329, 338, 335, 336, 333, 334,
	332, 331, 330, 340, 323, 324, 326, 22, 325, 173,
	0, 192, 226, 205, 187, 219, 0, 0, 202, 0,
	0, 0, 0, 292, 0, 0, 0, 184, 0, 291,
	0, 186, 328, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 321, 322, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 341, 309, 308, 310, 311, 312,
	313, 0, 0, 179, 314, 315, 316, 0, 0, 289,
	302, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 300, 0, 0, 0, 0, 339, 0,
	301, 0, 0, 298, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	337, 0, 0, 204, 0, 0, 0, 0, 180, 0,
	207, 203, 217, 175, 215, 210, 197, 189, 190, 174,
	0, 206, 183, 188, 182, 201, 212, 213, 181, 227,
	178, 221, 177, 0, 220, 200, 0, 211, 216, 198,
	195, 176, 214, 196, 194, 191, 185, 0, 0, 0,
	209, 218, 228, 0, 0, 223, 224, 225, 0, 0,
	329, 338, 335, 336, 333, 334, 332, 331, 330, 340,
	323, 324, 326, 0, 325, 173, 0, 192, 226, 205,
	187, 219, 0, 0, 202, 0, 0, 0, 0, 292,
	0, 0, 0, 184, 0, 291, 0, 186, 328, 193,
	0, 0, 208, 199, 0, 0, 0, 0, 321, 322,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	341, 309, 308, 310, 311, 312, 313, 0, 0, 179,
	314, 315, 316, 0, 0, 289, 302, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 300,
	0, 0, 0, 0, 339, 0, 301, 0, 0, 298,
	303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 337, 0, 0, 204,
	0, 0, 0, 0, 180, 0, 207, 203, 217, 175,
	215, 210, 197, 189, 190, 174, 0, 206, 183, 188,
	182, 201, 212, 213, 181, 227, 178, 221, 177, 0,
	220, 200, 0, 211, 216, 198, 195, 176, 214, 196,
	194, 191, 185, 0, 0, 0, 209, 218, 228, 0,
	0, 223, 224, 225, 0, 0, 329, 338, 335, 336,
	333, 334, 332, 331, 330, 340, 323, 324, 326, 0,
	325, 173, 202, 192, 226, 205, 187, 219, 0, 0,
	0, 184, 0, 0, 0, 0, 328, 193, 0, 0,
	208, 199, 0, 186, 0, 0, 321, 322, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 341, 309,
	308, 310, 311, 312, 313, 0, 0, 179, 314, 315,
	316, 0, 0, 0, 302, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 300, 0, 0,
	0, 0, 339, 0, 301, 0, 0, 298, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 337, 0, 0, 204, 0, 0,
	0, 0, 180, 0, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 0, 220, 200,
	0, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 0, 0, 209, 218, 228, 0, 0, 223,
	224, 225, 0, 0, 329, 338, 335, 336, 333, 334,
	332, 331, 330, 340, 323, 324, 326, 0, 325, 173,
	0, 192, 226, 205, 187, 219, 0, 202, 0, 0,
	0, 733, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 186, 193, 0, 0, 208, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 496, 0, 735, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 414, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 180, 0, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 0, 220, 200, 0, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 0, 0, 209,
	218, 228, 0, 0, 223, 224, 225, 0, 0, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 173, 0, 192, 226, 205, 187,
	219, 184, 0, 0, 0, 0, 0, 193, 0, 0,
	208, 199, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 180, 0, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 0, 220, 200,
	0, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 0, 202, 209, 218, 228, 903, 0, 223,
	224, 225, 184, 0, 0, 0, 0, 0, 193, 0,
	0, 208, 199, 0, 0, 0, 0, 0, 0, 173,
	0, 192, 226, 205, 187, 219, 0, 0, 0, 230,
	0, 905, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 180, 0, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 0, 220,
	200, 0, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 0, 0, 209, 218, 228, 0, 0,
	223, 224, 225, 0, 0, 0, 0, 22, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	173, 0, 192, 226, 205, 187, 219, 184, 0, 0,
	0, 0, 0, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 180, 0,
	207, 203, 217, 175, 215, 210, 197, 189, 190, 174,
	0, 206, 183, 188, 182, 201, 212, 213, 181, 227,
	178, 221, 177, 0, 220, 200, 0, 211, 216, 198,
	195, 176, 214, 196, 194, 191, 185, 0, 0, 202,
	209, 218, 228, 0, 0, 223, 224, 225, 184, 0,
	0, 0, 0, 0, 193, 0, 0, 208, 199, 0,
	0, 0, 0, 0, 0, 173, 0, 192, 226, 205,
	187, 219, 0, 0, 0, 496, 0, 0, 494, 0,
	0, 495, 0, 0, 179, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 180,
	0, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 0, 220, 200, 0, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 0,
	202, 209, 218, 228, 0, 0, 223, 224, 225, 184,
	0, 0, 0, 0, 0, 193, 0, 0, 208, 199,
	0, 0, 0, 0, 0, 0, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 230, 0, 905, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	180, 0, 207, 203, 217, 175, 215, 210, 197, 189,
	190, 174, 0, 206, 183, 188, 182, 201, 212, 213,
	181, 227, 178, 221, 177, 0, 220, 200, 0, 211,
	216, 198, 195, 176, 214, 196, 194, 191, 185, 0,
	0, 202, 209, 218, 228, 0, 0, 223, 224, 225,
	184, 0, 0, 0, 0, 0, 193, 0, 0, 208,
	199, 0, 0, 0, 0, 0, 0, 173, 0, 192,
	226, 205, 187, 219, 47, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 180, 0, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 0, 220, 200, 0,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 0, 202, 209, 218, 228, 0, 0, 223, 224,
	225, 184, 0, 0, 0, 0, 0, 193, 0, 0,
	208, 199, 0, 0, 0, 0, 0, 0, 173, 0,
	192, 226, 205, 187, 219, 0, 0, 0, 496, 0,
	735, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 180, 0, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 0, 220, 200,
	0, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 0, 0, 209, 218, 228, 202, 0, 223,
	224, 225, 0, 0, 0, 354, 184, 0, 0, 0,
	0, 0, 193, 0, 0, 208, 199, 0, 0, 173,
	0, 192, 226, 205, 187, 219, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 186, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 180, 0, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 0, 220, 200, 0, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 0, 202, 209,
	218, 228, 0, 0, 223, 224, 225, 184, 0, 0,
	0, 0, 0, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 0, 0, 173, 0, 192, 226, 205, 187,
	219, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 180, 0,
	207, 203, 217, 175, 215, 210, 197, 189, 190, 174,
	0, 206, 183, 188, 182, 201, 212, 213, 181, 227,
	178, 221, 177, 0, 220, 200, 0, 211, 216, 198,
	195, 176, 214, 196, 194, 191, 185, 0, 0, 202,
	209, 218, 228, 0, 0, 223, 224, 225, 184, 0,
	0, 0, 0, 0, 193, 0, 0, 208, 199, 0,
	0, 0, 0, 0, 0, 173, 0, 192, 226, 205,
	187, 219, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 180,
	0, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 0, 220, 200, 0, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 0,
	202, 209, 218, 228, 0, 0, 223, 224, 225, 184,
	0, 0, 0, 0, 0, 193, 0, 0, 208, 199,
	0, 0, 0, 0, 0, 0, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	180, 0, 207, 203, 217, 175, 215, 210, 197, 189,
	190, 174, 0, 206, 183, 188, 182, 201, 212, 213,
	181, 227, 178, 221, 177, 0, 220, 200, 0, 211,
	216, 198, 195, 176, 214, 196, 194, 191, 185, 0,
	0, 0, 209, 218, 228, 0, 0, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 192,
	226, 205, 187, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
}
var yyPact = [...]int{

	83, -1000, -169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	682, 703, -1000, -1000, -1000, -1000, -1000, 469, -34, -5,
	-41, 22, 21, 1632, 5733, -1000, -1000, 298, -159, -1000,
	-1000, -1000, -1000, -1000, 452, -1000, -1000, -1000, -1000, -1000,
	658, 674, 497, 651, 586, -1000, -5, 5733, 694, -1000,
	-145, 325, -8, 389, -8, 17, -1000, -11, 385, -11,
	5733, 5733, -1000, 693, -39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 376, 638, 3657, 3657, 682, -1000, 452, -1000, -1000,
	-1000, 611, -1000, -1000, 213, 5280, 605, 71, 5733, 671,
	384, -1000, 958, 5733, 194, 503, 5733, 5733, 5733, 643,
	501, 5733, -1000, -1000, -1000, 5733, 5733, 5733, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 699, 119, 240, -1000, 3657,
	1240, 445, 445, -1000, -1000, 44, -1000, -1000, 3835, 3835,
	3835, 3835, 3835, 3835, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 445, 57, -1000,
	3471, 445, 445, 445, 445, 445, 445, 3657, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, -1000, -1000, 436, -1000, 187, 658, 376, 586, 4672,
	509, -1000, -1000, 467, 5733, -1000, 5582, 2904, 690, -148,
	-163, 105, 258, -86, -1000, -1000, 450, -1000, 450, 450,
	450, 450, -56, -56, -56, -56, -1000, -1000, -1000, -1000,
	-1000, 474, -1000, 450, 450, 450, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 473, 473, 473, 451, 451, -1000,
	642, 5733, -1000, 35, -1000, -1000, 5733, -1000, -1000, -1000,
	-1000, -1000, 584, 3657, 3657, 245, 3657, 3657, 136, 3835,
	252, 147, 3835, 3835, 3835, 3835, 3835, 3835, 3835, 3835,
	3835, 3835, 3835, 3835, 3835, 3835, 3835, 296, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 380, -1000, 452, 582,
	582, 102, 102, 102, 102, 102, 1384, 1107, 2692, 376,
	379, 233, 3471, 3099, 3099, 3657, 3657, 3099, 652, 180,
	233, 5431, -1000, 376, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3099, 3099, 3099, 3099, 3657, -1000, -1000, -1000, 638,
	-1000, 652, 681, -1000, 595, 589, -1000, -1000, 3099, -1000,
	481, 5582, 445, -1000, 4521, -1000, 514, -1000, 167, -1000,
	53, -1000, -1000, -1000, -1000, -1000, 682, 3657, 445, -1000,
	-81, 166, -1000, -1000, 472, 634, 89, 369, -1000, -1000,
	627, -1000, 202, -89, -1000, -1000, 269, -56, -56, -1000,
	-1000, 95, 603, 95, 95, 95, 304, -1000, -1000, -1000,
	-1000, 266, -1000, -1000, -1000, 259, -1000, -1000, 2056, -1000,
	113, 165, -2, -19, -22, -25, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 553, 136,
	151, -1000, -1000, 264, -1000, -1000, 233, 233, 447, -1000,
	-1000, -1000, -1000, 252, 3835, 3835, 3835, 387, 447, 1360,
	243, 502, 102, 88, 88, 125, 125, 125, 125, 125,
	188, 188, -1000, -1000, -1000, 376, -1000, -1000, -1000, 376,
	3099, 420, -1000, -1000, 4020, 51, 445, 49, -1000, -1000,
	-1000, 3657, -1000, 376, 359, 359, 55, 237, 359, 3099,
	189, -1000, 3657, 376, -1000, 359, 376, 359, 359, -1000,
	-1000, 5733, -1000, -1000, -1000, -1000, 500, -1000, 637, 401,
	400, -1000, -1000, 3285, 376, 375, 48, 682, 5582, 3657,
	2692, 658, 233, 366, 614, 164, 355, 5431, -1000, 353,
	-1000, -1000, -82, 290, -1000, -1000, -1000, 396, 95, 95,
	-1000, 348, 135, -1000, -1000, -1000, 373, -1000, 417, 361,
	-1000, -1000, -1000, -1000, -1000, 5733, -1000, -1000, -1000, -1000,
	-1000, 344, -59, 469, 340, 325, -1000, -1000, -1000, -1000,
	-1000, 387, 447, 1295, -1000, 3835, 3835, -1000, -1000, 359,
	3099, -1000, -1000, 5125, -1000, -1000, 2268, 3099, 2480, 233,
	-1000, -1000, -1000, 52, 296, 52, -127, 435, 171, -1000,
	3657, 172, -1000, -1000, -1000, -1000, -1000, -1000, 690, 4974,
	633, -1000, 445, -1000, -1000, 523, 5431, 5431, 658, -1000,
	233, -1000, -1000, 376, -1000, -68, 249, -1000, 318, -1000,
	450, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 301, 234, -1000, 232, -1000,
	-1000, -1000, 598, -1000, -1000, -1000, -1000, 3835, 447, 447,
	-1000, -1000, -1000, -1000, 47, 376, -1000, 376, 450, 450,
	-1000, 450, 451, -1000, 450, -37, 450, -38, 376, 376,
	445, -124, -1000, 233, 3657, 688, 402, 565, -1000, -1000,
	-1000, 648, 4195, 4346, 697, -1000, 445, -1000, 452, 33,
	-1000, -1000, 2056, 153, -1000, -1000, 5431, -1000, 204, 632,
	-1000, 631, -1000, 392, 391, 314, 447, 1844, -1000, -1000,
	-1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3835, 376, 297, 233, 685, 661, 4974, 4974, 4974, 4974,
	-1000, 521, 519, -1000, 578, 544, 540, 5733, -1000, 313,
	4195, 62, -1000, 4823, -1000, -1000, 5582, 400, 376, 5431,
	-1000, 261, -1000, -1000, 241, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 76, -1000, -1000, -1000, 3657, 3657, 565,
	448, 608, -1000, -1000, -1000, -1000, 518, -1000, 517, -1000,
	-1000, -1000, -1000, -1000, 14, 3, 2, -1000, 381, -1000,
	-1000, -1000, -1000, 376, 20, -136, 233, 315, 3657, 3657,
	-1000, -1000, 445, 445, 445, -1000, 539, -131, -139, 233,
	233, 5431, 5431, 5431, -1000, 536, -1000, 309, -1000, 309,
	309, -133, -1000, 5431, -1000, -1000, -137, -1000, -142, -1000,
}
var yyPgo = [...]int{

	0, 851, 850, 849, 848, 847, 846, 69, 414, 845,
	842, 841, 840, 837, 836, 834, 833, 832, 831, 829,
	828, 825, 824, 52, 823, 822, 821, 43, 819, 47,
	818, 817, 23, 102, 31, 26, 3, 815, 21, 13,
	4, 814, 812, 14, 811, 178, 809, 808, 807, 2,
	20, 806, 805, 804, 803, 40, 621, 802, 799, 797,
	795, 794, 792, 39, 1, 11, 8, 17, 791, 18,
	6, 789, 38, 788, 786, 785, 783, 29, 775, 42,
	773, 15, 36, 772, 28, 7, 33, 766, 348, 763,
	260, 292, 762, 761, 759, 45, 0, 59, 12, 22,
	758, 729, 37, 5, 755, 753, 83, 10, 25, 19,
	752, 750, 749, 748, 747, 744, 743, 244, 740, 738,
	24, 32, 736, 735, 733, 732, 731, 44, 16, 727,
	726, 725, 724, 30, 720, 41, 27, 719, 718, 717,
	9, 715, 714, 713, 50, 46, 709, 128,
}
var yyR1 = [...]int{

	0, 142, 143, 143, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 136, 138, 123, 123, 122, 122, 124, 124, 137,
	137, 137, 133, 111, 111, 111, 114, 114, 112, 112,
	112, 112, 112, 112, 112, 113, 113, 113, 113, 113,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 132,
	132, 117, 117, 127, 127, 128, 128, 128, 125, 125,
	126, 126, 129, 129, 129, 118, 118, 118, 118, 118,
	130, 130, 120, 120, 120, 121, 121, 131, 131, 131,
	131, 131, 119, 119, 134, 139, 139, 139, 139, 135,
	135, 141, 141, 140, 16, 16, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 1, 19, 2, 3, 4,
	5, 5, 110, 110, 110, 20, 20, 20, 20, 20,
	20, 21, 22, 22, 22, 22, 146, 23, 24, 24,
	25, 25, 25, 29, 29, 29, 27, 27, 28, 28,
	34, 34, 33, 33, 35, 35, 35, 35, 100, 100,
	100, 99, 99, 37, 37, 38, 38, 39, 39, 40,
	40, 40, 47, 41, 41, 41, 41, 105, 105, 104,
	104, 104, 103, 103, 42, 42, 42, 42, 43, 43,
	43, 43, 44, 44, 46, 46, 45, 45, 48, 48,
	48, 48, 49, 49, 50, 50, 36, 36, 36, 36,
	36, 36, 36, 89, 89, 52, 52, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 62, 62, 62,
	62, 62, 62, 53, 53, 53, 53, 53, 53, 53,
	32, 32, 63, 63, 63, 69, 64, 64, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 60, 60,
	60, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	59, 59, 59, 59, 59, 59, 59, 59, 147, 147,
	61, 61, 61, 61, 30, 30, 30, 30, 30, 108,
	108, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 73, 73, 31, 31, 71, 71,
	72, 74, 74, 70, 70, 70, 55, 55, 55, 55,
	55, 55, 55, 57, 57, 57, 75, 75, 76, 76,
	77, 77, 78, 78, 79, 80, 80, 80, 81, 81,
	81, 81, 82, 82, 82, 54, 54, 54, 54, 54,
	54, 83, 83, 83, 83, 84, 84, 65, 65, 67,
	67, 66, 68, 85, 85, 86, 87, 87, 90, 90,
	91, 91, 88, 88, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 93, 93, 93, 94, 94, 97,
	97, 98, 98, 101, 101, 102, 102, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 144, 145,
	106, 107, 107, 107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 5, 4, 3, 3, 2, 2, 3,
	3, 2, 1, 1, 1, 3, 5, 5, 5, 3,
	3, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -142, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 131, 111, 124, 47, 204, 126, 211, 212, 214,
	24, 125, 129, 130, -144, 7, 188, 50, -143, 217,
	-77, 14, -25, 5, -23, -146, -23, -23, -23, -106,
	-136, 50, 180, 115, 114, -88, 118, 114, 115, 180,
	114, 114, -110, 173, 107, 177, 178, 53, -95, -96,
	67, 21, 23, 167, 70, 102, 15, 71, 152, 155,
	101, 189, 45, 181, 182, 179, 180, 172, 28, 9,
	24, 125, 20, 95, 109, 74, 75, 205, 128, 22,
	126, 65, 18, 48, 10, 12, 13, 119, 118, 86,
	115, 43, 7, 103, 25, 83, 39, 27, 41, 84,
	16, 183, 184, 30, 193, 97, 46, 33, 68, 63,
	49, 66, 14, 44, 209, 208, 85, 110, 188, 42,
	6, 192, 29, 124, 206, 40, 114, 73, 117, 64,
	210, 5, 120, 8, 47, 121, 185, 186, 187, 31,
	207, 72, 11, 194, 138, 132, 160, 151, 149, 62,
	127, 147, 143, 141, 26, 165, 216, 199, 142, 136,
	137, 164, 196, 32, 163, 159, 162, 135, 158, 36,
	154, 144, 17, 130, 122, 198, 140, 129, 35, 169,
	134, 156, 145, 146, 161, 133, 157, 131, 170, 200,
	153, 150, 116, 174, 175, 176, 197, 148, 171, -101,
	53, -96, -106, -106, 56, 213, -106, -106, -106, -106,
	-106, -7, -81, 16, 15, -10, -8, -144, 6, 19,
	20, -29, 37, 38, -24, -88, -45, -101, 10, 201,
	-137, -133, 53, -91, 119, 53, -91, 114, -90, 119,
	53, -90, -45, -45, -106, 10, 114, 180, -106, -106,
	-106, -106, -145, 52, -82, 18, 30, -36, -51, 68,
	-56, 28, 22, -55, -52, -70, -68, -69, 102, 91,
	92, 99, 69, 103, -60, -58, -59, -61, 55, 54,
	56, 57, 58, 59, 63, 64, 65, -97, -101, -66,
	-144, 41, 42, 189, 190, 193, 191, 71, 31, 179,
	187, 186, 185, 183, 184, 181, 182, 119, 180, 97,
	188, 53, -96, -78, -79, -36, -77, -7, -23, 33,
	-27, 20, 61, -46, 25, -45, 29, 104, -45, 15,
	52, 51, -111, -114, -116, -115, -112, -113, 149, 150,
	102, 153, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 127, 145, 146, 147, 148, 132, 133, 134,
	135, 136, 137, 138, 140, 141, 142, 143, 144, -101,
	68, 49, -45, -45, -45, 22, 49, -101, -45, -45,
	-45, 8, 86, 67, 66, 83, 51, 17, -36, -53,
	86, 68, 84, 85, 70, 88, 87, 98, 91, 92,
	93, 94, 95, 96, 97, 89, 90, 101, 76, 77,
	78, 79, 80, 81, 82, -89, -144, -69, -144, 105,
	106, -56, -56, -56, -56, -56, -56, -144, 104, -7,
	-64, -36, -144, -144, -144, -144, -144, -144, -144, -73,
	-36, -144, -147, -144, -147, -147, -147, -147, -147, -147,
	-147, -144, -144, -144, -144, 51, -80, 23, 24, -81,
	-145, -29, -57, -97, 56, 59, 53, -96, -28, 40,
	-54, 29, 31, -7, -144, -45, -85, -86, -70, -97,
	-101, -102, -101, -95, 107, 173, -50, 11, 203, -138,
	-123, 216, -133, -134, -139, 122, 120, -135, 115, 27,
	-129, 63, 68, -125, 170, -117, 50, -117, -117, -117,
	-117, -120, 152, -120, -120, -120, 50, -117, -117, -117,
	-127, 50, -127, -127, -128, 50, -128, 22, -45, -92,
	110, 216, 189, 112, 109, 113, 108, 167, 152, 62,
	28, 14, 200, 53, -45, -106, -106, -106, 35, -36,
	-36, -62, 63, 68, 64, 65, -36, -36, -56, -63,
	-66, -69, 60, 86, 84, 85, 70, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -108, 53, 55, 53, -55, -55, -97, -34,
	20, -33, -35, 93, -36, -101, -98, -102, -97, -95,
	-145, 51, -145, -7, -33, -33, -36, -36, -33, -27,
	-71, -72, 72, -97, -145, -33, -34, -33, -33, -79,
	-82, -87, 18, 10, 31, 31, -33, -84, 49, -85,
	-65, -67, -66, -144, -7, -83, -97, -50, 51, 76,
	104, -77, -36, -144, -124, 167, 76, 50, 27, -135,
	53, 53, -118, 28, 63, -126, 171, 56, -120, -120,
	-121, 101, 29, -121, -121, -121, -132, 55, 56, 56,
	-107, -144, -98, -95, -106, -93, -94, 117, 21, 115,
	27, 76, 117, 123, 123, 123, 36, 63, 64, 65,
	-63, -56, -56, -56, -32, 128, 67, -145, -145, -33,
	51, -100, -99, 21, -97, 55, 104, -144, 104, -36,
	-145, -145, -145, 51, 121, 21, -145, -33, -74, -72,
	74, -36, -145, -145, -145, -145, -145, -45, -37, 10,
	26, -84, 51, -145, -145, -145, 51, 104, -77, -86,
	-36, -98, -81, 53, -122, 28, 76, 53, -141, -140,
	-97, 53, -130, 167, 55, 56, 57, 63, 52, -121,
	-121, 53, 53, 102, 52, 51, 51, 52, 51, -45,
	-106, 53, 152, -136, 53, -133, -32, 67, -56, -56,
	-145, -35, -99, 93, -102, -34, -98, -109, 102, 149,
	127, 147, 143, 164, 154, 169, 145, 170, -108, -109,
	194, -77, 75, -36, 73, -50, -38, -39, -40, -41,
	-47, -69, -144, -45, 27, -67, 31, -7, -144, -97,
	-97, -81, -145, 155, 56, 52, 51, -117, -131, 122,
	27, 120, 55, 56, 56, 29, -56, 104, -145, -145,
	-117, -117, -117, -128, -117, 137, -117, 137, -145, -145,
	-144, -31, 192, -36, -75, 12, 51, -42, -43, -44,
	39, 43, 45, 40, 41, 42, 46, -105, 21, -38,
	-144, -104, -103, 21, -101, 55, 8, -65, -7, 104,
	-107, 76, -140, -119, 62, 27, 27, 52, 52, 53,
	93, -120, 53, -56, -145, 55, -76, 13, 15, -39,
	-40, -39, -40, 39, 39, 39, 44, 39, 44, 39,
	-43, -101, -145, -48, 47, 118, 48, -103, -85, -145,
	-97, 53, 55, -30, 86, 197, -36, -64, 49, 49,
	39, 39, 115, 115, 115, -145, 195, 46, 198, -36,
	-36, -144, -144, -144, 36, 196, 199, -49, -97, -49,
	-49, 36, -145, 51, -145, -145, 197, -97, 198, 199,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	380, 0, 166, 166, 166, 166, 600, 0, 0, 422,
	0, 0, 0, 0, 0, 600, 600, 0, 0, 600,
	600, 600, 600, 600, 0, 31, 32, 598, 1, 3,
	388, 0, 0, 170, 173, 168, 422, 0, 0, 35,
	36, 0, 420, 0, 420, 0, 423, 418, 0, 418,
	0, 0, 600, 525, 459, 600, 600, 152, 153, 154,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 595, 596, 597, 161,
	443, 444, 147, 148, 600, 600, 151, 162, 163, 164,
	165, 25, 392, 0, 0, 380, 27, 0, 166, 171,
	172, 176, 174, 175, 167, 0, 0, 226, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 146, 155, 0, 0, 0, 159, 160,
	149, 150, 26, 599, 21, 0, 0, 389, 236, 0,
	241, 243, 0, 278, 279, 280, 281, 282, 0, 0,
	0, 0, 0, 0, 304, 305, 306, 307, 366, 367,
	368, 369, 370, 371, 372, 245, 246, 363, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 328,
	328, 328, 328, 328, 328, 328, 328, 0, 0, 0,
	0, -2, -2, 381, 382, 385, 388, 25, 173, 0,
	178, 177, 169, 0, 0, 225, 0, 0, 234, 0,
	43, 0, 102, 98, 54, 55, 91, 57, 91, 91,
	91, 91, 112, 112, 112, 112, 83, 84, 85, 86,
	87, 0, 70, 91, 91, 91, 74, 58, 59, 60,
	61, 62, 63, 64, 93, 93, 93, 95, 95, 38,
	0, 0, 40, 0, 142, 419, 0, 144, 600, 600,
	600, 393, 0, 0, 0, 0, 0, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 267, 268, 269, 242, 0, 256, 0, 0,
	0, 298, 299, 300, 301, 302, 0, 180, 0, 25,
	0, 276, 0, 0, 0, 0, 0, 0, 176, 0,
	355, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 0, 180, 0, 0, 0, 384, 386, 387, 392,
	28, 176, 0, 373, 0, 0, 439, 440, 0, 179,
	405, 0, 0, -2, 0, 224, 234, 413, 0, 363,
	0, 227, 445, 446, 459, 525, 380, 0, 0, 41,
	47, 0, 50, 51, 0, 0, 0, 0, 129, 130,
	105, 103, 0, 100, 99, 56, 0, 112, 112, 77,
	78, 115, 0, 115, 115, 115, 0, 71, 72, 73,
	65, 0, 66, 67, 68, 0, 69, 421, 601, 600,
	434, 0, 431, 0, 429, 0, 424, 425, 426, 427,
	428, 430, 432, 433, 143, 156, 157, 158, 0, 237,
	238, 240, 257, 0, 259, 261, 390, 391, 247, 248,
	272, 273, 274, 0, 0, 0, 0, 270, 252, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 297, 339, 340, 0, 295, 296, 303, 0,
	0, 181, 182, 184, 188, 0, 364, 0, 441, -2,
	275, 0, 411, 25, 0, 0, 0, 0, 0, 0,
	361, 358, 0, 0, 329, 0, 0, 0, 0, 383,
	22, 0, 416, 417, 374, 375, 193, 29, 0, 405,
	395, 407, 409, 0, 25, 0, 401, 380, 0, 0,
	0, 388, 235, 0, 45, 0, 0, 0, 125, 0,
	127, 128, 110, 0, 104, 53, 101, 0, 115, 115,
	79, 0, 0, 80, 81, 82, 0, 89, 0, 0,
	39, 602, 603, 442, 134, 0, 600, 435, 436, 437,
	438, 0, 0, 0, 0, 0, 394, 258, 260, 262,
	249, 270, 253, 0, 250, 0, 0, 244, 308, 0,
	0, 185, 189, 0, 191, 192, 0, 180, 0, 277,
	-2, 311, 312, 0, 0, 0, 0, 380, 0, 359,
	0, 0, 319, 330, 331, 332, 333, 23, 234, 0,
	0, 30, 0, 410, -2, 0, 0, 0, 388, 414,
	415, 364, 34, 0, 42, 0, 0, 44, 0, 131,
	91, 126, 117, 111, 106, 107, 108, 109, 92, 75,
	76, 116, 113, 114, 88, 0, 0, 96, 0, 135,
	136, 137, 0, 139, 140, 141, 251, 0, 271, 254,
	309, 183, 190, 186, 0, 0, 365, 0, 91, 91,
	344, 91, 95, 347, 91, 349, 91, 352, 0, 0,
	0, 356, 318, 362, 0, 376, 194, 195, 197, 198,
	199, 207, 0, 209, 0, 408, 0, -2, 0, 403,
	402, 33, 601, 0, 48, 124, 0, 133, 122, 0,
	119, 121, 90, 0, 0, 0, 255, 0, 310, 313,
	341, 112, 345, 346, 348, 350, 351, 353, 315, 314,
	0, 0, 0, 360, 378, 0, 0, 0, 0, 0,
	214, 0, 0, 217, 0, 0, 0, 0, 208, 0,
	0, 228, 210, 0, 212, 213, 0, 398, 25, 0,
	37, 0, 132, 52, 0, 118, 120, 94, 97, 138,
	187, 342, 343, 334, 317, 357, 24, 0, 0, 196,
	203, 0, 206, 215, 216, 218, 0, 220, 0, 222,
	223, 200, 201, 202, 0, 0, 0, 211, 406, -2,
	404, 46, 123, 0, 0, 0, 379, 377, 0, 0,
	219, 221, 0, 0, 0, 316, 0, 0, 0, 204,
	205, 0, 0, 0, 335, 0, 338, 0, 232, 0,
	0, 336, 229, 0, 230, 231, 0, 233, 0, 337,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 217,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:263
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:268
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:269
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:295
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:303
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:341
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:364
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:374
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:392
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:398
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:405
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:413
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:420
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:438
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:444
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:462
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:466
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:670
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:674
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:679
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:683
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:691
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:709
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:741
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:753
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:784
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:797
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:814
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:818
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:824
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:834
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:874
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:878
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:883
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:892
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:896
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:900
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:904
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:911
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:919
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:924
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &Xa{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &Explain{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:958
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:997
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.statement = &OtherRead{}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &OtherRead{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1042
		{
			setAllowComments(yylex, true)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.bytes2 = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.str = UnionStr
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.str = UnionAllStr
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.str = UnionDistinctStr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = SQLCacheStr
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.str = DistinctStr
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = StraightJoinHint
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.selectExprs = nil
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.empty = struct{}{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.empty = struct{}{}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.str = JoinStr
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.str = JoinStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.str = JoinStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.str = StraightJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.str = LeftJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.str = LeftJoinStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.str = RightJoinStr
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.str = RightJoinStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = NaturalJoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexHints = nil
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.expr = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.str = IsNullStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.str = IsNotNullStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.str = IsTrueStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.str = IsNotTrueStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.str = IsFalseStr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = IsNotFalseStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = EqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = LessThanStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.str = GreaterThanStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.str = LessEqualStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.str = GreaterEqualStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.str = NotEqualStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1634
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1642
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = BooleanModeStr
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = QueryExpansionStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = nil
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.str = string("")
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = nil
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &NullVal{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.exprs = nil
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.orderBy = nil
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.str = AscScr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.str = AscScr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = DescScr
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.limit = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.str = ForUpdateStr
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.str = ShareModeStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2114
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.updateExprs = nil
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.byt = 0
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.byt = 1
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.byt = 0
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.byt = 1
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = IgnoreStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2459
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			decNesting(yylex)
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2473
		{
			forceEOF(yylex)
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2478
		{
			forceEOF(yylex)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			forceEOF(yylex)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
