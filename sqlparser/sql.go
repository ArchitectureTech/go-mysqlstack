//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const CHARSET = 57477
const TEXT = 57478
const TINYTEXT = 57479
const MEDIUMTEXT = 57480
const LONGTEXT = 57481
const BLOB = 57482
const TINYBLOB = 57483
const MEDIUMBLOB = 57484
const LONGBLOB = 57485
const JSON = 57486
const ENUM = 57487
const NULLX = 57488
const AUTO_INCREMENT = 57489
const APPROXNUM = 57490
const SIGNED = 57491
const UNSIGNED = 57492
const ZEROFILL = 57493
const DATABASES = 57494
const TABLES = 57495
const VITESS_KEYSPACES = 57496
const VITESS_SHARDS = 57497
const VSCHEMA_TABLES = 57498
const CURRENT_TIMESTAMP = 57499
const DATABASE = 57500
const CURRENT_DATE = 57501
const CURRENT_TIME = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const UTC_DATE = 57505
const UTC_TIME = 57506
const UTC_TIMESTAMP = 57507
const REPLACE = 57508
const CONVERT = 57509
const CAST = 57510
const GROUP_CONCAT = 57511
const SEPARATOR = 57512
const MATCH = 57513
const AGAINST = 57514
const BOOLEAN = 57515
const LANGUAGE = 57516
const WITH = 57517
const QUERY = 57518
const EXPANSION = 57519
const UNUSED = 57520
const PARTITION = 57521
const PARTITIONS = 57522
const HASH = 57523
const XA = 57524
const ENGINES = 57525
const STATUS = 57526
const VERSIONS = 57527
const PROCESSLIST = 57528
const QUERYZ = 57529
const TXNZ = 57530
const KILL = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const SESSION = 57535
const ENGINE = 57536

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"STATUS",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"ENGINE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 263,
	104, 439,
	-2, 435,
	-1, 264,
	104, 440,
	-2, 436,
	-1, 509,
	5, 25,
	-2, 392,
	-1, 525,
	104, 442,
	-2, 438,
	-1, 737,
	5, 26,
	-2, 271,
	-1, 761,
	5, 26,
	-2, 393,
	-1, 838,
	5, 25,
	-2, 395,
	-1, 940,
	5, 26,
	-2, 396,
}

const yyNprod = 600
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 5744

var yyAct = [...]int{

	264, 466, 968, 630, 258, 893, 829, 632, 300, 879,
	701, 663, 774, 828, 664, 241, 562, 518, 808, 549,
	890, 50, 644, 730, 628, 324, 618, 691, 660, 595,
	289, 298, 722, 625, 78, 230, 523, 535, 558, 347,
	353, 704, 268, 49, 529, 60, 259, 287, 234, 526,
	325, 44, 250, 266, 980, 967, 834, 979, 230, 465,
	3, 54, 201, 959, 977, 265, 966, 821, 260, 260,
	958, 183, 230, 230, 873, 77, 687, 192, 542, 778,
	207, 198, 231, 676, 283, 56, 57, 58, 59, 844,
	797, 550, 478, 322, 868, 44, 866, 276, 502, 68,
	69, 65, 64, 246, 240, 302, 67, 178, 271, 713,
	955, 954, 913, 953, 255, 274, 72, 71, 900, 232,
	455, 456, 235, 236, 237, 238, 239, 858, 279, 280,
	764, 734, 432, 431, 441, 442, 434, 435, 436, 437,
	438, 439, 440, 433, 673, 464, 443, 284, 364, 692,
	851, 360, 627, 261, 261, 433, 281, 443, 443, 221,
	543, 418, 70, 421, 63, 203, 787, 902, 537, 179,
	771, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 419, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 269, 219, 199, 421, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 550, 935,
	937, 208, 217, 227, 957, 788, 222, 223, 224, 537,
	945, 432, 431, 441, 442, 434, 435, 436, 437, 438,
	439, 440, 433, 740, 172, 443, 191, 225, 204, 186,
	218, 852, 712, 850, 677, 681, 292, 348, 420, 419,
	363, 709, 823, 602, 536, 230, 185, 711, 230, 534,
	645, 533, 747, 420, 419, 421, 349, 600, 601, 599,
	825, 230, 645, 275, 230, 230, 230, 539, 936, 230,
	421, 406, 540, 230, 230, 230, 431, 441, 442, 434,
	435, 436, 437, 438, 439, 440, 433, 44, 424, 443,
	423, 741, 715, 716, 717, 536, 350, 295, 685, 351,
	905, 358, 355, 66, 361, 855, 285, 286, 434, 435,
	436, 437, 438, 439, 440, 433, 946, 943, 443, 467,
	408, 409, 410, 854, 422, 845, 476, 420, 419, 414,
	415, 416, 700, 710, 278, 708, 270, 452, 454, 420,
	419, 699, 47, 503, 421, 588, 590, 591, 230, 688,
	589, 230, 598, 233, 512, 495, 421, 521, 260, 916,
	254, 260, 522, 463, 742, 853, 468, 469, 470, 471,
	472, 473, 474, 698, 477, 479, 479, 479, 479, 479,
	479, 479, 479, 487, 488, 489, 490, 513, 496, 551,
	552, 553, 515, 453, 497, 942, 525, 510, 230, 520,
	530, 910, 273, 230, 511, 796, 509, 493, 494, 420,
	419, 564, 786, 585, 586, 776, 592, 593, 480, 481,
	482, 483, 484, 485, 486, 288, 421, 779, 780, 781,
	560, 561, 619, 772, 620, 782, 499, 974, 288, 877,
	288, 20, 596, 261, 847, 846, 261, 768, 524, 682,
	420, 419, 621, 503, 566, 728, 288, 793, 792, 580,
	790, 789, 467, 763, 288, 639, 640, 421, 503, 634,
	288, 436, 437, 438, 439, 440, 433, 622, 623, 443,
	367, 366, 756, 277, 272, 348, 269, 581, 582, 583,
	909, 908, 51, 783, 245, 44, 525, 661, 634, 362,
	362, 503, 662, 633, 635, 642, 260, 519, 22, 468,
	759, 877, 649, 672, 22, 791, 653, 647, 636, 22,
	670, 652, 597, 728, 665, 545, 546, 547, 548, 728,
	671, 507, 728, 508, 314, 313, 315, 316, 317, 318,
	555, 556, 557, 319, 837, 491, 624, 362, 524, 666,
	47, 44, 47, 247, 799, 689, 690, 503, 47, 544,
	667, 646, 680, 47, 703, 563, 678, 674, 559, 694,
	695, 696, 554, 62, 432, 431, 441, 442, 434, 435,
	436, 437, 438, 439, 440, 433, 949, 809, 443, 661,
	412, 261, 407, 928, 669, 926, 952, 47, 929, 505,
	927, 457, 458, 459, 460, 461, 462, 702, 930, 811,
	885, 886, 637, 638, 951, 596, 641, 925, 924, 718,
	972, 503, 251, 252, 965, 813, 714, 817, 736, 812,
	648, 810, 650, 651, 584, 354, 815, 658, 657, 748,
	705, 290, 856, 693, 770, 230, 814, 659, 352, 359,
	524, 816, 818, 291, 684, 907, 746, 906, 835, 725,
	467, 679, 757, 726, 503, 565, 411, 889, 354, 503,
	656, 767, 242, 735, 737, 738, 739, 766, 655, 743,
	919, 758, 765, 365, 749, 918, 750, 751, 752, 753,
	248, 249, 243, 51, 876, 597, 519, 230, 282, 257,
	897, 754, 417, 53, 760, 761, 762, 784, 785, 881,
	884, 885, 886, 882, 732, 883, 887, 55, 48, 950,
	1, 773, 503, 594, 532, 527, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 824, 798, 803, 323, 804, 267, 230, 61, 531,
	697, 820, 849, 794, 503, 503, 822, 524, 819, 807,
	777, 806, 775, 826, 836, 802, 525, 827, 538, 727,
	686, 842, 541, 675, 528, 665, 769, 904, 683, 228,
	795, 370, 371, 369, 373, 744, 441, 442, 434, 435,
	436, 437, 438, 439, 440, 433, 372, 833, 443, 368,
	666, 73, 256, 839, 262, 262, 843, 881, 884, 885,
	886, 882, 838, 883, 887, 732, 256, 256, 524, 874,
	864, 888, 892, 729, 230, 230, 707, 706, 567, 451,
	654, 668, 492, 346, 503, 917, 875, 745, 503, 898,
	475, 703, 643, 301, 901, 859, 860, 840, 841, 503,
	903, 587, 832, 665, 312, 309, 767, 869, 870, 311,
	310, 498, 871, 506, 425, 299, 293, 934, 230, 230,
	230, 230, 912, 831, 891, 921, 356, 923, 666, 230,
	44, 920, 230, 922, 702, 230, 880, 931, 878, 899,
	938, 503, 939, 830, 755, 872, 260, 944, 719, 720,
	721, 504, 23, 52, 253, 19, 14, 13, 12, 27,
	915, 948, 947, 467, 10, 9, 8, 7, 833, 833,
	833, 833, 6, 5, 4, 244, 848, 524, 933, 832,
	21, 775, 891, 2, 18, 17, 16, 940, 577, 15,
	11, 636, 524, 960, 961, 0, 0, 0, 0, 0,
	0, 0, 575, 503, 503, 503, 970, 971, 0, 0,
	861, 862, 0, 863, 0, 503, 865, 0, 867, 0,
	0, 0, 0, 832, 832, 832, 832, 579, 0, 0,
	0, 261, 956, 0, 941, 0, 574, 832, 0, 0,
	0, 0, 0, 0, 962, 963, 964, 0, 0, 256,
	0, 0, 256, 0, 0, 0, 973, 0, 975, 976,
	0, 0, 0, 0, 0, 405, 0, 0, 256, 256,
	256, 800, 801, 413, 0, 0, 0, 256, 256, 256,
	0, 0, 571, 576, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 969, 969, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 978, 0,
	432, 431, 441, 442, 434, 435, 436, 437, 438, 439,
	440, 433, 0, 573, 443, 432, 431, 441, 442, 434,
	435, 436, 437, 438, 439, 440, 433, 0, 572, 443,
	0, 0, 0, 0, 0, 0, 0, 857, 723, 0,
	0, 0, 256, 0, 262, 514, 0, 262, 570, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	427, 0, 430, 0, 0, 0, 0, 0, 444, 445,
	446, 447, 448, 449, 450, 569, 428, 429, 426, 432,
	431, 441, 442, 434, 435, 436, 437, 438, 439, 440,
	433, 0, 256, 443, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 626, 914,
	297, 0, 0, 0, 183, 0, 296, 0, 0, 333,
	192, 0, 0, 207, 198, 0, 0, 0, 0, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 263, 314, 313, 315, 316, 317, 318, 631, 514,
	178, 319, 320, 321, 631, 631, 294, 307, 631, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 631, 631, 631, 0, 0, 0, 304,
	305, 629, 0, 0, 0, 344, 0, 306, 0, 631,
	303, 308, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 342, 0, 0, 203, 0,
	0, 0, 179, 0, 206, 202, 216, 174, 214, 209,
	196, 188, 189, 173, 0, 205, 182, 187, 181, 200,
	211, 212, 180, 226, 177, 220, 176, 0, 219, 199,
	0, 210, 215, 197, 194, 175, 213, 195, 193, 190,
	184, 0, 0, 0, 208, 217, 227, 0, 0, 222,
	223, 224, 334, 343, 340, 341, 338, 339, 337, 336,
	335, 345, 328, 329, 331, 0, 330, 172, 0, 191,
	225, 204, 186, 218, 432, 431, 441, 442, 434, 435,
	436, 437, 438, 439, 440, 433, 0, 0, 443, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 256,
	0, 297, 0, 0, 0, 183, 0, 296, 0, 0,
	333, 192, 0, 0, 207, 198, 0, 0, 0, 0,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 263, 314, 313, 315, 316, 317, 318, 0,
	0, 178, 319, 320, 321, 0, 0, 294, 307, 0,
	332, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 305, 629, 631, 0, 0, 344, 0, 306, 514,
	631, 303, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 342, 0, 0, 203,
	0, 256, 0, 179, 0, 206, 202, 216, 174, 214,
	209, 196, 188, 189, 173, 0, 205, 182, 187, 181,
	200, 211, 212, 180, 226, 177, 220, 176, 0, 219,
	199, 0, 210, 215, 197, 194, 175, 213, 195, 193,
	190, 184, 0, 0, 0, 208, 217, 227, 0, 0,
	222, 223, 224, 334, 343, 340, 341, 338, 339, 337,
	336, 335, 345, 328, 329, 331, 0, 330, 172, 0,
	191, 225, 204, 186, 218, 0, 0, 0, 256, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 256, 256, 256, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 256, 0, 0, 895,
	0, 0, 262, 160, 149, 121, 162, 98, 113, 171,
	114, 115, 141, 85, 129, 201, 111, 0, 101, 80,
	108, 81, 99, 123, 183, 126, 97, 151, 132, 168,
	192, 136, 0, 207, 198, 0, 0, 125, 154, 127,
	148, 120, 142, 91, 135, 163, 112, 139, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 138, 158, 110, 140, 79, 137, 0, 83, 86,
	170, 156, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 124, 128, 145, 118, 0, 0, 0, 0, 0,
	0, 911, 0, 102, 0, 134, 0, 0, 0, 89,
	84, 122, 0, 0, 0, 516, 0, 103, 146, 0,
	155, 119, 221, 157, 117, 116, 161, 164, 203, 152,
	100, 109, 179, 107, 206, 202, 216, 174, 214, 209,
	196, 188, 189, 173, 0, 205, 182, 187, 181, 200,
	211, 212, 180, 226, 177, 220, 176, 87, 219, 199,
	88, 210, 215, 197, 194, 175, 213, 195, 193, 190,
	184, 0, 82, 0, 208, 217, 227, 96, 517, 222,
	223, 224, 94, 95, 92, 93, 130, 131, 165, 166,
	167, 147, 90, 0, 0, 150, 133, 172, 0, 191,
	225, 204, 186, 218, 0, 0, 0, 0, 106, 153,
	169, 144, 143, 159, 0, 0, 0, 0, 0, 185,
	160, 149, 121, 162, 98, 113, 171, 114, 115, 141,
	85, 129, 201, 111, 0, 101, 80, 108, 81, 99,
	123, 183, 126, 97, 151, 132, 168, 192, 136, 0,
	207, 198, 0, 0, 125, 154, 127, 148, 120, 142,
	91, 135, 163, 112, 139, 47, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 138, 158,
	110, 140, 79, 137, 0, 83, 86, 170, 156, 104,
	105, 0, 0, 0, 0, 0, 0, 0, 124, 128,
	145, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 134, 0, 0, 0, 89, 84, 122, 0,
	0, 0, 516, 0, 103, 146, 0, 155, 119, 221,
	157, 117, 116, 161, 164, 203, 152, 100, 109, 179,
	107, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 0, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 87, 219, 199, 88, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 0, 82,
	0, 208, 217, 227, 96, 517, 222, 223, 224, 94,
	95, 92, 93, 130, 131, 165, 166, 167, 147, 90,
	0, 0, 150, 133, 172, 0, 191, 225, 204, 186,
	218, 0, 0, 0, 0, 106, 153, 169, 144, 143,
	159, 0, 0, 0, 0, 0, 185, 160, 149, 121,
	162, 98, 113, 171, 114, 115, 141, 85, 129, 201,
	111, 0, 101, 80, 108, 81, 99, 123, 183, 126,
	97, 151, 132, 168, 192, 136, 0, 207, 198, 0,
	0, 125, 154, 127, 148, 120, 142, 91, 135, 163,
	112, 139, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 138, 158, 110, 140, 79,
	137, 0, 83, 86, 170, 156, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 124, 128, 145, 118, 0,
	0, 0, 0, 0, 0, 805, 0, 102, 0, 134,
	0, 0, 0, 89, 84, 122, 0, 0, 0, 516,
	0, 103, 146, 0, 155, 119, 221, 157, 117, 116,
	161, 164, 203, 152, 100, 109, 179, 107, 206, 202,
	216, 174, 214, 209, 196, 188, 189, 173, 0, 205,
	182, 187, 181, 200, 211, 212, 180, 226, 177, 220,
	176, 87, 219, 199, 88, 210, 215, 197, 194, 175,
	213, 195, 193, 190, 184, 0, 82, 0, 208, 217,
	227, 96, 517, 222, 223, 224, 94, 95, 92, 93,
	130, 131, 165, 166, 167, 147, 90, 0, 0, 150,
	133, 172, 0, 191, 225, 204, 186, 218, 0, 0,
	0, 0, 106, 153, 169, 144, 143, 159, 0, 0,
	0, 0, 0, 185, 160, 149, 121, 162, 98, 113,
	171, 114, 115, 141, 85, 129, 201, 111, 0, 101,
	80, 108, 81, 99, 123, 183, 126, 97, 151, 132,
	168, 192, 136, 0, 207, 198, 0, 0, 125, 154,
	127, 148, 120, 142, 91, 135, 163, 112, 139, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 138, 158, 110, 140, 79, 137, 0, 83,
	86, 170, 156, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 124, 128, 145, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 134, 0, 0, 0,
	89, 84, 122, 0, 0, 0, 516, 0, 103, 146,
	0, 155, 119, 221, 157, 117, 116, 161, 164, 203,
	152, 100, 109, 179, 107, 206, 202, 216, 174, 214,
	209, 196, 188, 189, 173, 0, 205, 182, 187, 181,
	200, 211, 212, 180, 226, 177, 220, 176, 87, 219,
	199, 88, 210, 215, 197, 194, 175, 213, 195, 193,
	190, 184, 0, 82, 0, 208, 217, 227, 96, 517,
	222, 223, 224, 94, 95, 92, 93, 130, 131, 165,
	166, 167, 147, 90, 0, 0, 150, 133, 172, 0,
	191, 225, 204, 186, 218, 0, 0, 0, 0, 106,
	153, 169, 144, 143, 159, 0, 0, 0, 0, 0,
	185, 160, 149, 121, 162, 98, 113, 171, 114, 115,
	141, 85, 129, 201, 111, 0, 101, 80, 108, 81,
	99, 123, 183, 126, 97, 151, 132, 168, 192, 136,
	0, 207, 198, 0, 0, 125, 154, 127, 148, 120,
	142, 91, 135, 163, 112, 139, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 138,
	158, 110, 140, 79, 137, 0, 83, 86, 170, 156,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 124,
	128, 145, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 134, 0, 0, 0, 89, 84, 122,
	0, 0, 0, 516, 0, 103, 146, 0, 155, 119,
	221, 157, 117, 116, 161, 164, 203, 152, 100, 109,
	179, 107, 206, 202, 216, 174, 214, 209, 196, 188,
	189, 173, 0, 205, 182, 187, 181, 200, 211, 212,
	180, 226, 177, 220, 176, 87, 219, 199, 88, 210,
	215, 197, 194, 175, 213, 195, 193, 190, 184, 0,
	82, 0, 208, 217, 227, 96, 517, 222, 223, 224,
	94, 95, 92, 93, 130, 131, 165, 166, 167, 147,
	90, 0, 0, 150, 133, 172, 0, 191, 225, 204,
	186, 218, 0, 0, 0, 0, 106, 153, 169, 144,
	143, 159, 0, 0, 0, 0, 0, 185, 160, 149,
	121, 162, 98, 113, 171, 114, 115, 141, 85, 129,
	201, 111, 0, 101, 80, 108, 81, 99, 123, 183,
	126, 97, 151, 132, 168, 192, 136, 0, 207, 198,
	0, 0, 125, 154, 127, 148, 120, 142, 91, 135,
	163, 112, 139, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 138, 158, 110, 140,
	79, 137, 0, 83, 86, 170, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 124, 128, 145, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	134, 0, 0, 0, 89, 84, 122, 0, 0, 0,
	516, 0, 103, 146, 0, 155, 119, 221, 157, 117,
	116, 161, 164, 203, 152, 100, 109, 179, 107, 206,
	202, 216, 174, 214, 209, 196, 188, 189, 173, 0,
	205, 182, 187, 181, 200, 211, 212, 180, 226, 177,
	220, 176, 87, 219, 199, 88, 210, 215, 197, 194,
	175, 213, 195, 193, 190, 184, 0, 82, 0, 208,
	217, 227, 96, 517, 222, 223, 224, 94, 95, 92,
	93, 130, 131, 165, 166, 167, 147, 90, 0, 0,
	150, 133, 172, 0, 191, 225, 204, 186, 218, 0,
	0, 0, 0, 106, 153, 169, 144, 143, 159, 0,
	0, 0, 0, 0, 185, 160, 149, 121, 162, 98,
	113, 171, 114, 115, 141, 85, 129, 201, 111, 0,
	101, 80, 108, 81, 99, 123, 183, 126, 97, 151,
	132, 168, 192, 136, 0, 207, 198, 0, 0, 125,
	154, 127, 148, 120, 142, 91, 135, 163, 112, 139,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 138, 158, 110, 140, 79, 137, 0,
	83, 86, 170, 156, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 124, 128, 145, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 134, 0, 0,
	0, 89, 84, 122, 0, 0, 0, 75, 0, 103,
	146, 0, 155, 119, 221, 157, 117, 116, 161, 164,
	203, 152, 100, 109, 179, 107, 206, 202, 216, 174,
	214, 209, 196, 188, 189, 173, 0, 205, 182, 187,
	181, 200, 211, 212, 180, 226, 177, 220, 176, 87,
	219, 199, 88, 210, 215, 197, 194, 175, 213, 195,
	193, 190, 184, 0, 82, 0, 208, 217, 227, 96,
	74, 222, 223, 224, 94, 95, 92, 93, 130, 131,
	165, 166, 167, 147, 90, 0, 0, 150, 133, 172,
	0, 191, 225, 204, 186, 218, 0, 0, 0, 0,
	106, 153, 169, 144, 143, 159, 0, 201, 0, 0,
	0, 185, 297, 0, 0, 0, 183, 0, 296, 0,
	0, 333, 192, 0, 0, 207, 198, 0, 0, 0,
	0, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 288, 263, 314, 313, 315, 316, 317, 318,
	0, 0, 178, 319, 320, 321, 0, 0, 294, 307,
	0, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 344, 0, 306,
	0, 0, 303, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 342, 0, 0,
	203, 0, 0, 0, 179, 0, 206, 202, 216, 174,
	214, 209, 196, 188, 189, 173, 0, 205, 182, 187,
	181, 200, 211, 212, 180, 226, 177, 220, 176, 0,
	219, 199, 0, 210, 215, 197, 194, 175, 213, 195,
	193, 190, 184, 0, 0, 0, 208, 217, 227, 0,
	0, 222, 223, 224, 334, 343, 340, 341, 338, 339,
	337, 336, 335, 345, 328, 329, 331, 22, 330, 172,
	0, 191, 225, 204, 186, 218, 0, 0, 201, 0,
	0, 0, 0, 297, 0, 0, 0, 183, 0, 296,
	0, 185, 333, 192, 0, 0, 207, 198, 0, 0,
	0, 0, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 263, 314, 313, 315, 316, 317,
	318, 0, 0, 178, 319, 320, 321, 0, 0, 294,
	307, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 344, 0,
	306, 0, 0, 303, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 342, 0,
	0, 203, 0, 0, 0, 179, 0, 206, 202, 216,
	174, 214, 209, 196, 188, 189, 173, 0, 205, 182,
	187, 181, 200, 211, 212, 180, 226, 177, 220, 176,
	0, 219, 199, 0, 210, 215, 197, 194, 175, 213,
	195, 193, 190, 184, 0, 0, 0, 208, 217, 227,
	0, 0, 222, 223, 224, 334, 343, 340, 341, 338,
	339, 337, 336, 335, 345, 328, 329, 331, 0, 330,
	172, 0, 191, 225, 204, 186, 218, 0, 0, 201,
	0, 0, 0, 0, 297, 0, 0, 0, 183, 0,
	296, 0, 185, 333, 192, 0, 0, 207, 198, 0,
	0, 0, 0, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 263, 314, 313, 315, 316,
	317, 318, 0, 0, 178, 319, 320, 321, 0, 0,
	294, 307, 0, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 344,
	0, 306, 0, 0, 303, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 342,
	0, 0, 203, 0, 0, 0, 179, 0, 206, 202,
	216, 174, 214, 209, 196, 188, 189, 173, 0, 205,
	182, 187, 181, 200, 211, 212, 180, 226, 177, 220,
	176, 0, 219, 199, 0, 210, 215, 197, 194, 175,
	213, 195, 193, 190, 184, 0, 0, 0, 208, 217,
	227, 0, 0, 222, 223, 224, 334, 343, 340, 341,
	338, 339, 337, 336, 335, 345, 328, 329, 331, 0,
	330, 172, 201, 191, 225, 204, 186, 218, 0, 0,
	0, 183, 0, 0, 0, 0, 333, 192, 0, 0,
	207, 198, 0, 185, 0, 0, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 263, 314,
	313, 315, 316, 317, 318, 0, 0, 178, 319, 320,
	321, 0, 0, 0, 307, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 344, 0, 306, 0, 0, 303, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 342, 0, 0, 203, 0, 0, 0, 179,
	0, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 0, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 0, 219, 199, 0, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 0, 0,
	0, 208, 217, 227, 0, 0, 222, 223, 224, 334,
	343, 340, 341, 338, 339, 337, 336, 335, 345, 328,
	329, 331, 0, 330, 172, 0, 191, 225, 204, 186,
	218, 0, 201, 0, 0, 0, 731, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 185, 192, 0, 0,
	207, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 376, 0, 0, 0, 502, 0,
	733, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 420, 419, 0, 0, 0, 388, 0, 0, 0,
	0, 393, 394, 395, 396, 397, 398, 399, 421, 400,
	401, 402, 403, 404, 389, 390, 391, 392, 374, 375,
	0, 0, 377, 0, 0, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 0, 0, 0, 0, 221,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 179,
	0, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 0, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 0, 219, 199, 0, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 0, 0,
	0, 208, 217, 227, 0, 22, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 172, 183, 191, 225, 204, 186,
	218, 192, 0, 0, 207, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 47,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 179, 0, 206, 202, 216, 174, 214,
	209, 196, 188, 189, 173, 0, 205, 182, 187, 181,
	200, 211, 212, 180, 226, 177, 220, 176, 0, 219,
	199, 0, 210, 215, 197, 194, 175, 213, 195, 193,
	190, 184, 0, 0, 201, 208, 217, 227, 894, 0,
	222, 223, 224, 183, 0, 0, 0, 0, 0, 192,
	0, 0, 207, 198, 0, 0, 0, 0, 172, 0,
	191, 225, 204, 186, 218, 0, 0, 0, 0, 0,
	229, 0, 896, 0, 0, 0, 0, 0, 0, 178,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 179, 0, 206, 202, 216, 174, 214, 209, 196,
	188, 189, 173, 0, 205, 182, 187, 181, 200, 211,
	212, 180, 226, 177, 220, 176, 0, 219, 199, 0,
	210, 215, 197, 194, 175, 213, 195, 193, 190, 184,
	0, 0, 0, 208, 217, 227, 0, 22, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 172, 183, 191, 225,
	204, 186, 218, 192, 0, 0, 207, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 47, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 179, 0, 206, 202, 216,
	174, 214, 209, 196, 188, 189, 173, 0, 205, 182,
	187, 181, 200, 211, 212, 180, 226, 177, 220, 176,
	0, 219, 199, 0, 210, 215, 197, 194, 175, 213,
	195, 193, 190, 184, 0, 0, 201, 208, 217, 227,
	0, 0, 222, 223, 224, 183, 0, 0, 0, 0,
	0, 192, 0, 0, 207, 198, 0, 0, 0, 0,
	172, 0, 191, 225, 204, 186, 218, 0, 0, 0,
	0, 0, 502, 0, 0, 500, 0, 0, 501, 0,
	0, 178, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 179, 0, 206, 202, 216, 174, 214,
	209, 196, 188, 189, 173, 0, 205, 182, 187, 181,
	200, 211, 212, 180, 226, 177, 220, 176, 0, 219,
	199, 0, 210, 215, 197, 194, 175, 213, 195, 193,
	190, 184, 0, 0, 201, 208, 217, 227, 0, 0,
	222, 223, 224, 183, 0, 0, 0, 0, 0, 192,
	0, 0, 207, 198, 0, 0, 0, 0, 172, 0,
	191, 225, 204, 186, 218, 0, 0, 0, 0, 0,
	229, 0, 896, 0, 0, 0, 0, 0, 0, 178,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 179, 0, 206, 202, 216, 174, 214, 209, 196,
	188, 189, 173, 0, 205, 182, 187, 181, 200, 211,
	212, 180, 226, 177, 220, 176, 0, 219, 199, 0,
	210, 215, 197, 194, 175, 213, 195, 193, 190, 184,
	0, 0, 201, 208, 217, 227, 0, 0, 222, 223,
	224, 183, 0, 0, 0, 0, 0, 192, 0, 0,
	207, 198, 0, 0, 0, 0, 172, 0, 191, 225,
	204, 186, 218, 0, 0, 47, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 179,
	0, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 0, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 0, 219, 199, 0, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 0, 0,
	201, 208, 217, 227, 0, 0, 222, 223, 224, 183,
	0, 0, 0, 0, 0, 192, 0, 0, 207, 198,
	0, 0, 0, 0, 172, 0, 191, 225, 204, 186,
	218, 0, 0, 0, 0, 0, 502, 0, 733, 0,
	0, 0, 0, 0, 0, 178, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 179, 0, 206,
	202, 216, 174, 214, 209, 196, 188, 189, 173, 0,
	205, 182, 187, 181, 200, 211, 212, 180, 226, 177,
	220, 176, 0, 219, 199, 0, 210, 215, 197, 194,
	175, 213, 195, 193, 190, 184, 0, 0, 0, 208,
	217, 227, 201, 0, 222, 223, 224, 0, 0, 0,
	357, 183, 0, 0, 0, 0, 0, 192, 0, 0,
	207, 198, 172, 0, 191, 225, 204, 186, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 185, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 179,
	0, 206, 202, 216, 174, 214, 209, 196, 188, 189,
	173, 0, 205, 182, 187, 181, 200, 211, 212, 180,
	226, 177, 220, 176, 0, 219, 199, 0, 210, 215,
	197, 194, 175, 213, 195, 193, 190, 184, 0, 0,
	201, 208, 217, 227, 0, 0, 222, 223, 224, 183,
	0, 0, 0, 0, 0, 192, 0, 0, 207, 198,
	0, 0, 0, 0, 172, 0, 191, 225, 204, 186,
	218, 0, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 179, 0, 206,
	202, 216, 174, 214, 209, 196, 188, 189, 173, 0,
	205, 182, 187, 181, 200, 211, 212, 180, 226, 177,
	220, 176, 0, 219, 199, 0, 210, 215, 197, 194,
	175, 213, 195, 193, 190, 184, 0, 0, 201, 208,
	217, 227, 0, 0, 222, 223, 224, 183, 0, 0,
	0, 0, 0, 192, 0, 0, 207, 198, 0, 0,
	0, 0, 172, 0, 191, 225, 204, 186, 218, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 179, 0, 206, 202, 216,
	174, 214, 209, 196, 188, 189, 173, 0, 205, 182,
	187, 181, 200, 211, 212, 180, 226, 177, 220, 176,
	0, 219, 199, 0, 210, 215, 197, 194, 175, 213,
	195, 193, 190, 184, 0, 0, 201, 208, 217, 227,
	0, 0, 222, 223, 224, 183, 0, 0, 0, 0,
	0, 192, 0, 0, 207, 198, 0, 0, 0, 0,
	172, 0, 191, 225, 204, 186, 218, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	22, 45, 24, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 203,
	0, 34, 0, 179, 47, 206, 202, 216, 174, 214,
	209, 196, 188, 189, 173, 0, 205, 182, 187, 181,
	200, 211, 212, 180, 226, 177, 220, 176, 0, 219,
	199, 0, 210, 215, 197, 194, 175, 213, 195, 193,
	190, 184, 0, 0, 0, 208, 217, 227, 0, 0,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 28, 29, 30, 0, 32, 0, 0, 172, 0,
	191, 225, 204, 186, 218, 33, 41, 36, 0, 0,
	42, 43, 31, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	37, 38, 0, 39,
}
var yyPact = [...]int{

	5534, -1000, -169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	689, 708, -1000, -1000, -1000, -1000, -165, 533, -11, -10,
	-13, 5, 4, 2890, 5459, -1000, -1000, 307, -160, -1000,
	-1000, -1000, -1000, -1000, 518, -1000, -1000, -1000, -1000, -1000,
	666, 687, 557, 681, 595, -1000, -10, 5459, 699, 5311,
	5311, -143, 443, -9, 441, -9, 3, -1000, -20, 440,
	-20, 5459, 5459, -1000, 698, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	383, 633, 3442, 3442, 689, -1000, 518, -1000, -1000, -1000,
	625, -1000, -1000, 251, 5015, 630, 47, 5459, 459, -1000,
	174, -1000, 44, -1000, -1000, 459, 678, 439, -1000, 3742,
	5459, 213, 553, 5459, 5459, 5459, 654, 551, 5459, -1000,
	-1000, -1000, 5459, 5459, 5459, -1000, -1000, -1000, -1000, -1000,
	704, 75, 283, -1000, 3442, 1062, 510, 510, -1000, -1000,
	15, -1000, -1000, 3615, 3615, 3615, 3615, 3615, 3615, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 510, 41, -1000, 3261, 510, 510, 510, 510,
	510, 510, 3442, 510, 510, 510, 510, 510, 510, 510,
	510, 510, 510, 510, 510, 510, 504, -1000, 394, 666,
	383, 595, 4419, 569, -1000, -1000, 512, 5459, -1000, 5311,
	2683, 695, 5311, 3442, 2476, -149, -167, 141, 214, -89,
	-1000, -1000, 519, -1000, 519, 519, 519, 519, -58, -58,
	-58, -58, -1000, -1000, -1000, -1000, -1000, 532, -1000, 519,
	519, 519, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	528, 528, 528, 525, 525, -1000, 653, 5459, -1000, 934,
	-1000, -1000, 5459, -1000, -1000, -1000, -1000, -1000, 609, 3442,
	3442, 292, 3442, 3442, 80, 3615, 302, 183, 3615, 3615,
	3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
	3615, 3615, 3615, 389, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 409, -1000, 518, 490, 490, 56, 56, 56,
	56, 56, 45, 1158, 2476, 383, 428, 271, 3261, 1389,
	1389, 3442, 3442, 1389, 658, 200, 271, 5163, -1000, 383,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1389, 1389, 1389,
	1389, 3442, -1000, -1000, -1000, 633, -1000, 658, 670, -1000,
	617, 616, -1000, -1000, 1389, -1000, 550, 5311, 510, -1000,
	4271, -1000, 506, -1000, -1000, -1000, -1000, -1000, 689, 3442,
	-1000, 271, -1000, 40, -1000, -1000, 510, -1000, -81, 168,
	-1000, -1000, 526, 644, 192, 406, -1000, -1000, 636, -1000,
	245, -92, -1000, -1000, 303, -58, -58, -1000, -1000, 48,
	624, 48, 48, 48, 328, -1000, -1000, -1000, -1000, 295,
	-1000, -1000, -1000, 286, -1000, -1000, 1855, -1000, 230, 166,
	-6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 600, 80, 114, -1000, -1000, 239,
	-1000, -1000, 271, 271, 1267, -1000, -1000, -1000, -1000, 302,
	3615, 3615, 3615, 983, 1267, 998, 707, 198, 56, 388,
	388, 57, 57, 57, 57, 57, 227, 227, -1000, -1000,
	-1000, 383, -1000, -1000, -1000, 383, 1389, 491, -1000, -1000,
	3795, 27, 510, -1000, 3442, -1000, 383, 414, 414, 182,
	353, 414, 1389, 188, -1000, 3442, 383, -1000, 414, 383,
	414, 414, -1000, -1000, 5459, -1000, -1000, -1000, -1000, 482,
	-1000, 646, 458, 469, -1000, -1000, 3080, 383, 422, 26,
	689, 666, 271, 2269, 404, 626, 94, 390, 5163, -1000,
	372, -1000, -1000, -85, 382, -1000, -1000, -1000, 451, 48,
	48, -1000, 369, 113, -1000, -1000, -1000, 419, -1000, 474,
	416, -1000, -1000, -1000, -1000, -1000, 5459, -1000, -1000, -1000,
	-1000, -1000, 362, -59, -1000, -1000, -1000, -1000, -1000, 983,
	1267, 497, -1000, 3615, 3615, -1000, -1000, 414, 1389, -1000,
	-1000, 4863, -1000, -1000, 2062, 1389, 271, -1000, -1000, -1000,
	495, 389, 495, -122, 488, 177, -1000, 3442, 197, -1000,
	-1000, -1000, -1000, -1000, -1000, 695, 4715, 641, -1000, 510,
	-1000, -1000, 523, 5163, 5163, 666, -1000, -1000, 383, -1000,
	-63, 279, -1000, 403, -1000, 519, -1000, 123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	320, 277, -1000, 259, -1000, -1000, -1000, 623, -1000, 3615,
	1267, 1267, -1000, -1000, -1000, -1000, 23, 383, 383, 519,
	519, -1000, 519, 525, -1000, 519, -38, 519, -40, 383,
	383, 510, -113, -1000, 271, 3442, 692, 470, 778, -1000,
	-1000, -1000, 656, 3959, 4107, 702, -1000, 510, -1000, 518,
	14, -1000, -1000, 1855, 91, -1000, -1000, 5163, -1000, 248,
	640, -1000, 638, -1000, 449, 448, 358, 1267, 1648, -1000,
	-1000, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3615, 383, 314, 271, 682, 675, 4715, 4715, 4715,
	4715, -1000, 589, 588, -1000, 566, 564, 579, 5459, -1000,
	398, 3959, 162, -1000, 4567, -1000, -1000, 5311, 469, 383,
	5163, -1000, 352, -1000, -1000, 272, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 134, -1000, -1000, -1000, 3442, 3442,
	778, 547, 680, -1000, -1000, -1000, -1000, 585, -1000, 567,
	-1000, -1000, -1000, -1000, -1000, 0, -2, -3, -1000, 459,
	-1000, -1000, -1000, -1000, 383, 24, -130, 271, 457, 3442,
	3442, -1000, -1000, 510, 510, 510, -1000, 598, -125, -139,
	271, 271, 5163, 5163, 5163, -1000, 594, -1000, 396, -1000,
	396, 396, -128, -1000, 5163, -1000, -1000, -136, -1000, -140,
	-1000,
}
var yyPgo = [...]int{

	0, 950, 949, 946, 945, 944, 943, 59, 451, 940,
	935, 934, 933, 932, 927, 926, 925, 924, 919, 918,
	917, 916, 915, 61, 914, 913, 912, 40, 911, 52,
	907, 905, 32, 152, 33, 24, 3, 904, 20, 13,
	6, 903, 898, 9, 896, 56, 886, 883, 877, 2,
	17, 876, 875, 874, 873, 31, 307, 871, 870, 869,
	865, 864, 861, 29, 1, 11, 25, 14, 853, 105,
	8, 852, 22, 850, 847, 846, 845, 21, 843, 39,
	842, 15, 30, 841, 28, 4, 46, 840, 313, 839,
	273, 346, 838, 837, 836, 41, 0, 93, 7, 23,
	833, 754, 36, 5, 832, 831, 82, 10, 26, 18,
	811, 809, 806, 794, 793, 792, 791, 160, 788, 787,
	19, 27, 786, 784, 783, 782, 780, 38, 16, 778,
	770, 762, 760, 42, 759, 37, 758, 756, 735, 734,
	12, 731, 730, 728, 50, 47, 727, 92,
}
var yyR1 = [...]int{

	0, 142, 143, 143, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 14, 15, 15, 15,
	15, 18, 136, 138, 123, 123, 122, 122, 124, 124,
	137, 137, 137, 133, 111, 111, 111, 114, 114, 112,
	112, 112, 112, 112, 112, 112, 113, 113, 113, 113,
	113, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	132, 132, 117, 117, 127, 127, 128, 128, 128, 125,
	125, 126, 126, 129, 129, 129, 118, 118, 118, 118,
	118, 130, 130, 120, 120, 120, 121, 121, 131, 131,
	131, 131, 131, 119, 119, 134, 139, 139, 139, 139,
	135, 135, 141, 141, 140, 16, 16, 16, 16, 16,
	17, 17, 17, 1, 19, 2, 3, 4, 5, 5,
	110, 110, 110, 20, 20, 20, 20, 21, 22, 22,
	22, 22, 146, 23, 24, 24, 25, 25, 25, 29,
	29, 29, 27, 27, 28, 28, 34, 34, 33, 33,
	35, 35, 35, 35, 100, 100, 100, 99, 99, 37,
	37, 38, 38, 39, 39, 40, 40, 40, 47, 41,
	41, 41, 41, 105, 105, 104, 104, 104, 103, 103,
	42, 42, 42, 42, 43, 43, 43, 43, 44, 44,
	46, 46, 45, 45, 48, 48, 48, 48, 49, 49,
	50, 50, 36, 36, 36, 36, 36, 36, 36, 89,
	89, 52, 52, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 62, 62, 62, 62, 62, 62, 53,
	53, 53, 53, 53, 53, 53, 32, 32, 63, 63,
	63, 69, 64, 64, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 60, 60, 60, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 59, 59, 59, 59,
	59, 59, 59, 59, 147, 147, 61, 61, 61, 61,
	30, 30, 30, 30, 30, 108, 108, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	73, 73, 31, 31, 71, 71, 72, 74, 74, 70,
	70, 70, 55, 55, 55, 55, 55, 55, 55, 57,
	57, 57, 75, 75, 76, 76, 77, 77, 78, 78,
	79, 80, 80, 80, 81, 81, 81, 81, 82, 82,
	82, 54, 54, 54, 54, 54, 54, 83, 83, 83,
	83, 84, 84, 65, 65, 67, 67, 66, 68, 85,
	85, 86, 87, 87, 90, 90, 91, 91, 88, 88,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	93, 93, 93, 94, 94, 97, 97, 98, 98, 101,
	101, 102, 102, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 144, 145, 106, 107, 107, 107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 3, 3, 2, 9, 4,
	6, 4, 4, 3, 0, 3, 0, 4, 0, 3,
	1, 3, 3, 7, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 4, 2, 3, 2, 2,
	1, 1, 1, 3, 2, 6, 7, 7, 7, 9,
	4, 5, 4, 3, 3, 2, 2, 3, 3, 2,
	1, 1, 1, 3, 5, 5, 5, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -142, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 128, 111, 121, 47, 199, 123, 206, 207, 209,
	24, 122, 126, 127, -144, 7, 183, 50, -143, 212,
	-77, 14, -25, 5, -23, -146, -23, -23, -23, -23,
	210, -136, 50, 175, 113, 112, -88, 116, 112, 113,
	175, 112, 112, -110, 170, 107, 53, -95, -96, 67,
	21, 23, 164, 70, 102, 15, 71, 149, 152, 101,
	184, 45, 176, 177, 174, 175, 169, 28, 9, 24,
	122, 20, 95, 109, 74, 75, 200, 125, 22, 123,
	65, 18, 48, 10, 12, 13, 117, 116, 86, 113,
	43, 7, 103, 25, 83, 39, 27, 41, 84, 16,
	178, 179, 30, 188, 97, 46, 33, 68, 63, 49,
	66, 14, 44, 204, 203, 85, 110, 183, 42, 6,
	187, 29, 121, 201, 40, 112, 73, 115, 64, 205,
	5, 118, 8, 47, 119, 180, 181, 182, 31, 202,
	72, 11, 189, 135, 129, 157, 148, 146, 62, 124,
	144, 140, 138, 26, 162, 211, 194, 139, 133, 134,
	161, 191, 32, 160, 156, 159, 132, 155, 36, 151,
	141, 17, 127, 120, 193, 137, 126, 35, 166, 131,
	153, 142, 143, 158, 130, 154, 128, 167, 195, 150,
	147, 114, 171, 172, 173, 192, 145, 168, -101, 53,
	-96, -106, -106, 56, 208, -106, -106, -106, -106, -106,
	-7, -81, 16, 15, -10, -8, -144, 6, 19, 20,
	-29, 37, 38, -24, -88, -45, -101, 10, -85, -86,
	-70, -97, -101, 53, -96, -85, 196, -137, -133, 53,
	-91, 117, 53, -91, 112, -90, 117, 53, -90, -45,
	-45, -106, 10, 112, 175, -106, -106, -145, 52, -82,
	18, 30, -36, -51, 68, -56, 28, 22, -55, -52,
	-70, -68, -69, 102, 91, 92, 99, 69, 103, -60,
	-58, -59, -61, 55, 54, 56, 57, 58, 59, 63,
	64, 65, -97, -101, -66, -144, 41, 42, 184, 185,
	188, 186, 71, 31, 174, 182, 181, 180, 178, 179,
	176, 177, 117, 175, 97, 183, -78, -79, -36, -77,
	-7, -23, 33, -27, 20, 61, -46, 25, -45, 29,
	104, -45, 51, 76, 104, 15, 52, 51, -111, -114,
	-116, -115, -112, -113, 146, 147, 102, 150, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 124, 142,
	143, 144, 145, 129, 130, 131, 132, 133, 134, 135,
	137, 138, 139, 140, 141, -101, 68, 49, -45, -45,
	-45, 22, 49, -101, -45, -45, -45, 8, 86, 67,
	66, 83, 51, 17, -36, -53, 86, 68, 84, 85,
	70, 88, 87, 98, 91, 92, 93, 94, 95, 96,
	97, 89, 90, 101, 76, 77, 78, 79, 80, 81,
	82, -89, -144, -69, -144, 105, 106, -56, -56, -56,
	-56, -56, -56, -144, 104, -7, -64, -36, -144, -144,
	-144, -144, -144, -144, -144, -73, -36, -144, -147, -144,
	-147, -147, -147, -147, -147, -147, -147, -144, -144, -144,
	-144, 51, -80, 23, 24, -81, -145, -29, -57, -97,
	56, 59, 53, -96, -28, 40, -54, 29, 31, -7,
	-144, -45, -85, -102, -101, -95, 107, 170, -50, 11,
	-86, -36, -98, -102, -97, -95, 198, -138, -123, 211,
	-133, -134, -139, 120, 118, -135, 113, 27, -129, 63,
	68, -125, 167, -117, 50, -117, -117, -117, -117, -120,
	149, -120, -120, -120, 50, -117, -117, -117, -127, 50,
	-127, -127, -128, 50, -128, 22, -45, -92, 110, 211,
	184, 108, 164, 149, 62, 28, 109, 14, 195, 53,
	-45, -106, -106, -106, 35, -36, -36, -62, 63, 68,
	64, 65, -36, -36, -56, -63, -66, -69, 60, 86,
	84, 85, 70, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -108, 53,
	55, 53, -55, -55, -97, -34, 20, -33, -35, 93,
	-36, -101, -98, -145, 51, -145, -7, -33, -33, -36,
	-36, -33, -27, -71, -72, 72, -97, -145, -33, -34,
	-33, -33, -79, -82, -87, 18, 10, 31, 31, -33,
	-84, 49, -85, -65, -67, -66, -144, -7, -83, -97,
	-50, -77, -36, 104, -144, -124, 164, 76, 50, 27,
	-135, 53, 53, -118, 28, 63, -126, 168, 56, -120,
	-120, -121, 101, 29, -121, -121, -121, -132, 55, 56,
	56, -107, -144, -98, -95, -106, -93, -94, 115, 21,
	113, 27, 76, 115, 36, 63, 64, 65, -63, -56,
	-56, -56, -32, 125, 67, -145, -145, -33, 51, -100,
	-99, 21, -97, 55, 104, -144, -36, -145, -145, -145,
	51, 119, 21, -145, -33, -74, -72, 74, -36, -145,
	-145, -145, -145, -145, -45, -37, 10, 26, -84, 51,
	-145, -145, -145, 51, 104, -77, -81, -98, 53, -122,
	28, 76, 53, -141, -140, -97, 53, -130, 164, 55,
	56, 57, 63, 52, -121, -121, 53, 53, 102, 52,
	51, 51, 52, 51, -45, -106, 53, 149, -32, 67,
	-56, -56, -145, -35, -99, 93, -102, -34, -109, 102,
	146, 124, 144, 140, 161, 151, 166, 142, 167, -108,
	-109, 189, -77, 75, -36, 73, -50, -38, -39, -40,
	-41, -47, -69, -144, -45, 27, -67, 31, -7, -144,
	-97, -97, -81, -145, 152, 56, 52, 51, -117, -131,
	120, 27, 118, 55, 56, 56, 29, -56, 104, -145,
	-145, -117, -117, -117, -128, -117, 134, -117, 134, -145,
	-145, -144, -31, 187, -36, -75, 12, 51, -42, -43,
	-44, 39, 43, 45, 40, 41, 42, 46, -105, 21,
	-38, -144, -104, -103, 21, -101, 55, 8, -65, -7,
	104, -107, 76, -140, -119, 62, 27, 27, 52, 52,
	53, 93, -120, 53, -56, -145, 55, -76, 13, 15,
	-39, -40, -39, -40, 39, 39, 39, 44, 39, 44,
	39, -43, -101, -145, -48, 47, 116, 48, -103, -85,
	-145, -97, 53, 55, -30, 86, 192, -36, -64, 49,
	49, 39, 39, 113, 113, 113, -145, 190, 46, 193,
	-36, -36, -144, -144, -144, 36, 191, 194, -49, -97,
	-49, -49, 36, -145, 51, -145, -145, 192, -97, 193,
	194,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	376, 0, 162, 162, 162, 162, 162, 0, 0, 418,
	0, 0, 0, 0, 0, 596, 596, 0, 0, 596,
	596, 596, 596, 596, 0, 31, 32, 594, 1, 3,
	384, 0, 0, 166, 169, 164, 418, 0, 0, 0,
	0, 37, 0, 416, 0, 416, 0, 419, 414, 0,
	414, 0, 0, 596, 521, 455, 150, 151, 152, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 157, 439,
	440, 145, 146, 596, 596, 149, 158, 159, 160, 161,
	25, 388, 0, 0, 376, 27, 0, 162, 167, 168,
	172, 170, 171, 163, 0, 0, 222, 0, 35, 409,
	0, 359, 0, -2, -2, 36, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	144, 153, 0, 0, 0, 147, 148, 26, 595, 21,
	0, 0, 385, 232, 0, 237, 239, 0, 274, 275,
	276, 277, 278, 0, 0, 0, 0, 0, 0, 300,
	301, 302, 303, 362, 363, 364, 365, 366, 367, 368,
	241, 242, 359, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 324, 324, 324, 324, 324, 324,
	324, 324, 0, 0, 0, 0, 377, 378, 381, 384,
	25, 169, 0, 174, 173, 165, 0, 0, 221, 0,
	0, 230, 0, 0, 0, 0, 44, 0, 103, 99,
	55, 56, 92, 58, 92, 92, 92, 92, 113, 113,
	113, 113, 84, 85, 86, 87, 88, 0, 71, 92,
	92, 92, 75, 59, 60, 61, 62, 63, 64, 65,
	94, 94, 94, 96, 96, 39, 0, 0, 41, 0,
	140, 415, 0, 142, 596, 596, 596, 389, 0, 0,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	265, 238, 0, 252, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 176, 0, 25, 0, 272, 0, 0,
	0, 0, 0, 0, 172, 0, 351, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 176, 0,
	0, 0, 380, 382, 383, 388, 28, 172, 0, 369,
	0, 0, 435, 436, 0, 175, 401, 0, 0, -2,
	0, 220, 230, 223, 441, 442, 455, 521, 376, 0,
	410, 411, 360, 0, 437, -2, 0, 42, 48, 0,
	51, 52, 0, 0, 0, 0, 130, 131, 106, 104,
	0, 101, 100, 57, 0, 113, 113, 78, 79, 116,
	0, 116, 116, 116, 0, 72, 73, 74, 66, 0,
	67, 68, 69, 0, 70, 417, 597, 596, 430, 0,
	427, 420, 421, 422, 423, 424, 425, 426, 428, 429,
	141, 154, 155, 156, 0, 233, 234, 236, 253, 0,
	255, 257, 386, 387, 243, 244, 268, 269, 270, 0,
	0, 0, 0, 266, 248, 0, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 293, 335,
	336, 0, 291, 292, 299, 0, 0, 177, 178, 180,
	184, 0, 360, 271, 0, 407, 25, 0, 0, 0,
	0, 0, 0, 357, 354, 0, 0, 325, 0, 0,
	0, 0, 379, 22, 0, 412, 413, 370, 371, 189,
	29, 0, 401, 391, 403, 405, 0, 25, 0, 397,
	376, 384, 231, 0, 0, 46, 0, 0, 0, 126,
	0, 128, 129, 111, 0, 105, 54, 102, 0, 116,
	116, 80, 0, 0, 81, 82, 83, 0, 90, 0,
	0, 40, 598, 599, 438, 135, 0, 596, 431, 432,
	433, 434, 0, 0, 390, 254, 256, 258, 245, 266,
	249, 0, 246, 0, 0, 240, 304, 0, 0, 181,
	185, 0, 187, 188, 0, 176, 273, -2, 307, 308,
	0, 0, 0, 0, 376, 0, 355, 0, 0, 315,
	326, 327, 328, 329, 23, 230, 0, 0, 30, 0,
	406, -2, 0, 0, 0, 384, 34, 361, 0, 43,
	0, 0, 45, 0, 132, 92, 127, 118, 112, 107,
	108, 109, 110, 93, 76, 77, 117, 114, 115, 89,
	0, 0, 97, 0, 136, 137, 138, 0, 247, 0,
	267, 250, 305, 179, 186, 182, 0, 0, 0, 92,
	92, 340, 92, 96, 343, 92, 345, 92, 348, 0,
	0, 0, 352, 314, 358, 0, 372, 190, 191, 193,
	194, 195, 203, 0, 205, 0, 404, 0, -2, 0,
	399, 398, 33, 597, 0, 49, 125, 0, 134, 123,
	0, 120, 122, 91, 0, 0, 0, 251, 0, 306,
	309, 337, 113, 341, 342, 344, 346, 347, 349, 311,
	310, 0, 0, 0, 356, 374, 0, 0, 0, 0,
	0, 210, 0, 0, 213, 0, 0, 0, 0, 204,
	0, 0, 224, 206, 0, 208, 209, 0, 394, 25,
	0, 38, 0, 133, 53, 0, 119, 121, 95, 98,
	139, 183, 338, 339, 330, 313, 353, 24, 0, 0,
	192, 199, 0, 202, 211, 212, 214, 0, 216, 0,
	218, 219, 196, 197, 198, 0, 0, 0, 207, 402,
	-2, 400, 47, 124, 0, 0, 0, 375, 373, 0,
	0, 215, 217, 0, 0, 0, 312, 0, 0, 0,
	200, 201, 0, 0, 0, 331, 0, 334, 0, 228,
	0, 0, 332, 225, 0, 226, 227, 0, 229, 0,
	333,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 212,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:264
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:269
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:270
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:274
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:296
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:308
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:342
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:353
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:375
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:381
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:387
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Set{Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:397
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:403
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:410
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:418
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:425
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:436
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:443
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:449
		{
			yyVAL.str = ""
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:458
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:462
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:467
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:471
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:482
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:492
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:502
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:675
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:679
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:688
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:700
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:714
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:727
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:741
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:746
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:780
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:784
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:793
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:810
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:819
		{
			yyVAL.optVal = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:823
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:829
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:835
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:839
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:847
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:863
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:867
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:879
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:883
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:893
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:897
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:904
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:912
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:917
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:933
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:939
		{
			yyVAL.statement = &Xa{}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:945
		{
			yyVAL.statement = &Explain{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:951
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:961
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:980
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:986
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:990
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:994
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:998
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &OtherRead{}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &OtherRead{}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1027
		{
			setAllowComments(yylex, true)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.bytes2 = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.str = UnionStr
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.str = UnionAllStr
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = UnionDistinctStr
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = SQLCacheStr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.str = DistinctStr
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.str = StraightJoinHint
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.selectExprs = nil
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.empty = struct{}{}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.empty = struct{}{}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.str = JoinStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.str = JoinStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = JoinStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.str = StraightJoinStr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.str = LeftJoinStr
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.str = LeftJoinStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = RightJoinStr
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.str = RightJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = NaturalJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.indexHints = nil
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.expr = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = IsNullStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = IsNotNullStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = IsTrueStr
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = IsNotTrueStr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.str = IsFalseStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.str = IsNotFalseStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = EqualStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.str = LessThanStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = GreaterThanStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = LessEqualStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.str = GreaterEqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = NotEqualStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1627
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1649
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 312:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.str = BooleanModeStr
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 333:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.str = QueryExpansionStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = nil
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.str = string("")
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.expr = &NullVal{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.exprs = nil
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = nil
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.orderBy = nil
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.str = AscScr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.str = AscScr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.str = DescScr
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.limit = nil
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = ForUpdateStr
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.str = ShareModeStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2099
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.updateExprs = nil
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.byt = 0
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.byt = 1
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.byt = 0
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.byt = 1
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.str = IgnoreStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2453
		{
			decNesting(yylex)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2458
		{
			forceEOF(yylex)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2463
		{
			forceEOF(yylex)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2467
		{
			forceEOF(yylex)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2471
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
