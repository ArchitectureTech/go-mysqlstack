//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const CHARSET = 57477
const TEXT = 57478
const TINYTEXT = 57479
const MEDIUMTEXT = 57480
const LONGTEXT = 57481
const BLOB = 57482
const TINYBLOB = 57483
const MEDIUMBLOB = 57484
const LONGBLOB = 57485
const JSON = 57486
const ENUM = 57487
const NULLX = 57488
const AUTO_INCREMENT = 57489
const APPROXNUM = 57490
const SIGNED = 57491
const UNSIGNED = 57492
const ZEROFILL = 57493
const DATABASES = 57494
const TABLES = 57495
const VITESS_KEYSPACES = 57496
const VITESS_SHARDS = 57497
const VSCHEMA_TABLES = 57498
const WARNINGS = 57499
const VARIABLES = 57500
const CURRENT_TIMESTAMP = 57501
const DATABASE = 57502
const CURRENT_DATE = 57503
const CURRENT_TIME = 57504
const LOCALTIME = 57505
const LOCALTIMESTAMP = 57506
const UTC_DATE = 57507
const UTC_TIME = 57508
const UTC_TIMESTAMP = 57509
const REPLACE = 57510
const CONVERT = 57511
const CAST = 57512
const GROUP_CONCAT = 57513
const SEPARATOR = 57514
const MATCH = 57515
const AGAINST = 57516
const BOOLEAN = 57517
const LANGUAGE = 57518
const WITH = 57519
const QUERY = 57520
const EXPANSION = 57521
const UNUSED = 57522
const PARTITION = 57523
const PARTITIONS = 57524
const HASH = 57525
const XA = 57526
const ENGINES = 57527
const STATUS = 57528
const VERSIONS = 57529
const PROCESSLIST = 57530
const QUERYZ = 57531
const TXNZ = 57532
const KILL = 57533
const START = 57534
const TRANSACTION = 57535
const COMMIT = 57536
const SESSION = 57537
const ENGINE = 57538

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"STATUS",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"ENGINE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 341,
	104, 440,
	-2, 436,
	-1, 342,
	104, 441,
	-2, 437,
	-1, 503,
	5, 25,
	-2, 393,
	-1, 627,
	104, 443,
	-2, 439,
	-1, 735,
	5, 26,
	-2, 272,
	-1, 759,
	5, 26,
	-2, 394,
	-1, 839,
	5, 25,
	-2, 396,
	-1, 941,
	5, 26,
	-2, 397,
}

const yyNprod = 601
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 5723

var yyAct = [...]int{

	342, 460, 969, 622, 830, 894, 295, 506, 774, 319,
	698, 658, 554, 829, 880, 242, 659, 891, 297, 809,
	701, 516, 727, 719, 541, 610, 655, 624, 620, 639,
	507, 617, 284, 587, 79, 231, 293, 50, 625, 527,
	344, 350, 54, 688, 261, 550, 282, 49, 251, 521,
	320, 44, 235, 518, 78, 259, 981, 968, 231, 317,
	980, 960, 978, 967, 59, 822, 56, 57, 58, 874,
	276, 231, 231, 67, 68, 202, 959, 64, 63, 895,
	684, 534, 778, 673, 184, 845, 459, 3, 797, 542,
	193, 472, 269, 208, 199, 44, 869, 867, 914, 264,
	232, 233, 738, 247, 236, 237, 238, 239, 240, 66,
	710, 230, 956, 897, 936, 938, 955, 414, 413, 954,
	179, 529, 267, 71, 70, 449, 450, 901, 859, 762,
	852, 241, 733, 731, 415, 277, 668, 274, 69, 458,
	278, 279, 62, 357, 689, 437, 412, 678, 290, 946,
	426, 425, 435, 436, 428, 429, 430, 431, 432, 433,
	434, 427, 427, 619, 437, 437, 415, 903, 706, 771,
	739, 709, 222, 674, 708, 667, 824, 640, 204, 787,
	400, 682, 180, 937, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 542, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 528, 220, 200,
	906, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 853, 958, 851, 209, 218, 228, 535, 788, 223,
	224, 225, 426, 425, 435, 436, 428, 429, 430, 431,
	432, 433, 434, 427, 487, 488, 437, 287, 345, 173,
	413, 192, 226, 205, 187, 219, 231, 947, 529, 231,
	707, 263, 705, 810, 231, 594, 415, 231, 231, 231,
	720, 186, 231, 640, 352, 745, 231, 231, 231, 592,
	593, 591, 856, 346, 262, 812, 417, 414, 413, 414,
	413, 348, 740, 418, 268, 855, 826, 531, 44, 280,
	281, 814, 532, 818, 415, 813, 415, 811, 414, 413,
	65, 447, 816, 47, 580, 582, 583, 846, 569, 581,
	416, 697, 815, 590, 461, 415, 266, 817, 819, 696,
	685, 470, 567, 234, 347, 414, 413, 414, 413, 712,
	713, 714, 446, 448, 528, 779, 780, 781, 944, 526,
	497, 525, 415, 782, 415, 231, 917, 571, 231, 611,
	854, 612, 489, 508, 271, 695, 566, 255, 457, 975,
	283, 462, 463, 464, 465, 466, 467, 468, 513, 471,
	473, 473, 473, 473, 473, 473, 473, 473, 481, 482,
	483, 484, 943, 911, 490, 796, 511, 491, 543, 544,
	545, 786, 231, 776, 504, 772, 522, 231, 768, 493,
	679, 556, 563, 568, 560, 613, 509, 577, 578, 283,
	584, 585, 474, 475, 476, 477, 478, 479, 480, 270,
	588, 878, 283, 848, 847, 725, 283, 793, 792, 589,
	503, 552, 553, 790, 789, 761, 283, 451, 452, 453,
	454, 455, 456, 565, 629, 283, 910, 497, 22, 430,
	431, 432, 433, 434, 427, 265, 461, 437, 564, 634,
	635, 262, 497, 573, 574, 575, 361, 360, 909, 627,
	783, 501, 51, 502, 517, 629, 614, 615, 47, 345,
	562, 309, 308, 310, 311, 312, 313, 20, 666, 44,
	314, 570, 47, 754, 22, 497, 628, 630, 508, 657,
	637, 757, 660, 462, 644, 878, 616, 561, 626, 725,
	642, 670, 648, 656, 666, 666, 647, 791, 665, 838,
	725, 641, 426, 425, 435, 436, 428, 429, 430, 431,
	432, 433, 434, 427, 725, 485, 437, 536, 47, 631,
	246, 555, 675, 661, 669, 44, 22, 551, 248, 497,
	546, 509, 686, 687, 664, 61, 677, 950, 586, 671,
	656, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 700, 691, 692, 693,
	406, 662, 401, 499, 953, 952, 537, 538, 539, 540,
	47, 588, 47, 929, 931, 926, 886, 887, 930, 699,
	589, 547, 548, 549, 927, 925, 252, 253, 626, 928,
	973, 966, 711, 497, 702, 715, 576, 632, 633, 653,
	652, 636, 857, 734, 435, 436, 428, 429, 430, 431,
	432, 433, 434, 427, 746, 643, 437, 645, 646, 690,
	231, 428, 429, 430, 431, 432, 433, 434, 427, 351,
	722, 437, 654, 356, 723, 461, 770, 908, 744, 285,
	681, 765, 349, 508, 907, 732, 497, 836, 735, 736,
	737, 286, 729, 741, 756, 767, 676, 755, 747, 627,
	748, 749, 750, 751, 557, 405, 766, 764, 890, 249,
	250, 351, 243, 763, 231, 920, 359, 244, 758, 759,
	760, 51, 919, 882, 885, 886, 887, 883, 318, 884,
	888, 877, 517, 951, 651, 275, 509, 258, 626, 497,
	784, 785, 650, 898, 497, 775, 411, 53, 55, 48,
	798, 716, 717, 718, 1, 773, 524, 519, 260, 825,
	60, 804, 627, 229, 803, 231, 523, 694, 850, 777,
	821, 808, 497, 497, 807, 820, 530, 660, 683, 795,
	806, 802, 828, 833, 837, 827, 257, 533, 672, 843,
	823, 520, 724, 769, 905, 680, 364, 365, 729, 257,
	257, 626, 363, 626, 367, 366, 362, 72, 889, 893,
	726, 742, 704, 835, 703, 834, 559, 445, 661, 649,
	663, 840, 486, 343, 918, 844, 876, 743, 469, 638,
	296, 841, 842, 579, 307, 304, 306, 865, 305, 492,
	875, 500, 419, 294, 288, 231, 231, 882, 885, 886,
	887, 883, 935, 884, 888, 497, 832, 839, 660, 497,
	899, 353, 881, 833, 860, 902, 861, 904, 879, 831,
	497, 256, 753, 873, 945, 498, 23, 870, 871, 800,
	801, 52, 700, 872, 272, 273, 254, 19, 14, 231,
	231, 231, 231, 13, 922, 892, 924, 808, 913, 661,
	231, 44, 921, 231, 923, 699, 231, 833, 833, 833,
	833, 939, 497, 932, 626, 508, 940, 12, 775, 27,
	10, 833, 9, 8, 7, 6, 5, 4, 245, 626,
	916, 21, 949, 948, 461, 2, 18, 900, 17, 834,
	834, 834, 834, 16, 15, 11, 0, 0, 934, 0,
	0, 0, 0, 892, 0, 0, 0, 941, 858, 0,
	0, 0, 0, 0, 961, 962, 0, 0, 509, 0,
	0, 942, 0, 0, 497, 497, 497, 971, 972, 0,
	0, 0, 0, 0, 257, 0, 497, 257, 0, 631,
	0, 0, 399, 0, 0, 257, 257, 257, 0, 0,
	407, 0, 957, 0, 257, 257, 257, 0, 0, 0,
	0, 0, 0, 849, 0, 963, 964, 965, 0, 0,
	0, 22, 45, 24, 25, 0, 974, 0, 976, 977,
	0, 915, 0, 970, 970, 970, 0, 0, 0, 40,
	0, 0, 0, 0, 26, 979, 0, 0, 862, 863,
	0, 864, 0, 0, 866, 0, 868, 0, 0, 0,
	0, 0, 34, 0, 0, 47, 0, 0, 0, 355,
	0, 0, 358, 799, 0, 0, 0, 0, 0, 0,
	402, 403, 404, 257, 0, 510, 512, 0, 0, 408,
	409, 410, 0, 426, 425, 435, 436, 428, 429, 430,
	431, 432, 433, 434, 427, 0, 0, 437, 425, 435,
	436, 428, 429, 430, 431, 432, 433, 434, 427, 0,
	0, 437, 28, 29, 30, 721, 32, 0, 0, 0,
	257, 0, 0, 0, 0, 257, 33, 41, 36, 0,
	0, 42, 43, 31, 0, 426, 425, 435, 436, 428,
	429, 430, 431, 432, 433, 434, 427, 0, 0, 437,
	0, 202, 0, 0, 0, 0, 0, 0, 505, 0,
	184, 0, 0, 0, 0, 0, 193, 0, 0, 208,
	199, 0, 0, 0, 0, 0, 623, 512, 0, 0,
	0, 0, 623, 623, 0, 0, 623, 496, 0, 0,
	46, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	623, 623, 623, 623, 0, 558, 35, 0, 0, 0,
	572, 0, 0, 37, 38, 0, 39, 623, 0, 0,
	510, 426, 425, 435, 436, 428, 429, 430, 431, 432,
	433, 434, 427, 0, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 180, 0,
	207, 203, 217, 175, 215, 210, 197, 189, 190, 174,
	0, 206, 183, 188, 182, 201, 212, 213, 181, 227,
	178, 221, 177, 0, 220, 200, 0, 211, 216, 198,
	195, 176, 214, 196, 194, 191, 185, 0, 0, 0,
	209, 218, 228, 0, 0, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 370, 0, 0, 173, 0, 192, 226, 205,
	187, 219, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 0, 0, 0, 382, 0, 0, 186, 0, 387,
	388, 389, 390, 391, 392, 393, 623, 394, 395, 396,
	397, 398, 383, 384, 385, 386, 368, 369, 257, 0,
	371, 0, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 0, 510, 0, 512, 202, 0,
	0, 0, 728, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 496, 0, 730, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 414, 413, 0,
	0, 0, 0, 0, 623, 0, 0, 0, 0, 0,
	512, 623, 0, 752, 415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 180, 0, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 794, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	0, 220, 200, 0, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 0, 0, 209, 218, 228,
	0, 0, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 896, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 192, 226, 205, 187, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 257, 257,
	257, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 257, 0, 0, 896, 0, 0, 510, 161, 150,
	122, 163, 99, 114, 172, 115, 116, 142, 86, 130,
	202, 112, 0, 102, 81, 109, 82, 100, 124, 184,
	127, 98, 152, 133, 169, 193, 137, 0, 208, 199,
	0, 0, 126, 155, 128, 149, 121, 143, 92, 136,
	164, 113, 140, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 139, 159, 111, 141,
	80, 138, 0, 84, 87, 171, 157, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 125, 129, 146, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	135, 0, 0, 0, 90, 85, 123, 0, 0, 0,
	74, 0, 104, 147, 0, 156, 120, 222, 158, 118,
	117, 162, 165, 204, 153, 101, 110, 180, 108, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 88, 220, 200, 89, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 83, 0, 209,
	218, 228, 97, 73, 223, 224, 225, 75, 76, 95,
	96, 93, 94, 131, 132, 166, 167, 168, 148, 91,
	0, 0, 151, 134, 173, 0, 192, 226, 205, 187,
	219, 0, 0, 0, 0, 107, 154, 170, 145, 144,
	160, 0, 0, 0, 0, 0, 186, 161, 150, 122,
	163, 99, 114, 172, 115, 116, 142, 86, 130, 202,
	112, 0, 102, 81, 109, 82, 100, 124, 184, 127,
	98, 152, 133, 169, 193, 137, 0, 208, 199, 0,
	0, 126, 155, 128, 149, 121, 143, 92, 136, 164,
	113, 140, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 139, 159, 111, 141, 80,
	138, 0, 84, 87, 171, 157, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 125, 129, 146, 119, 0,
	0, 0, 0, 0, 0, 912, 0, 103, 0, 135,
	0, 0, 0, 90, 85, 123, 0, 0, 0, 514,
	0, 104, 147, 0, 156, 120, 222, 158, 118, 117,
	162, 165, 204, 153, 101, 110, 180, 108, 207, 203,
	217, 175, 215, 210, 197, 189, 190, 174, 0, 206,
	183, 188, 182, 201, 212, 213, 181, 227, 178, 221,
	177, 88, 220, 200, 89, 211, 216, 198, 195, 176,
	214, 196, 194, 191, 185, 0, 83, 0, 209, 218,
	228, 97, 515, 223, 224, 225, 0, 0, 95, 96,
	93, 94, 131, 132, 166, 167, 168, 148, 91, 0,
	0, 151, 134, 173, 0, 192, 226, 205, 187, 219,
	0, 0, 0, 0, 107, 154, 170, 145, 144, 160,
	0, 0, 0, 0, 0, 186, 161, 150, 122, 163,
	99, 114, 172, 115, 116, 142, 86, 130, 202, 112,
	0, 102, 81, 109, 82, 100, 124, 184, 127, 98,
	152, 133, 169, 193, 137, 0, 208, 199, 0, 0,
	126, 155, 128, 149, 121, 143, 92, 136, 164, 113,
	140, 47, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 139, 159, 111, 141, 80, 138,
	0, 84, 87, 171, 157, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 125, 129, 146, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 135, 0,
	0, 0, 90, 85, 123, 0, 0, 0, 514, 0,
	104, 147, 0, 156, 120, 222, 158, 118, 117, 162,
	165, 204, 153, 101, 110, 180, 108, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 0, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	88, 220, 200, 89, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 83, 0, 209, 218, 228,
	97, 515, 223, 224, 225, 0, 0, 95, 96, 93,
	94, 131, 132, 166, 167, 168, 148, 91, 0, 0,
	151, 134, 173, 0, 192, 226, 205, 187, 219, 0,
	0, 0, 0, 107, 154, 170, 145, 144, 160, 0,
	0, 0, 0, 0, 186, 161, 150, 122, 163, 99,
	114, 172, 115, 116, 142, 86, 130, 202, 112, 0,
	102, 81, 109, 82, 100, 124, 184, 127, 98, 152,
	133, 169, 193, 137, 0, 208, 199, 0, 0, 126,
	155, 128, 149, 121, 143, 92, 136, 164, 113, 140,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 139, 159, 111, 141, 80, 138, 0,
	84, 87, 171, 157, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 125, 129, 146, 119, 0, 0, 0,
	0, 0, 0, 805, 0, 103, 0, 135, 0, 0,
	0, 90, 85, 123, 0, 0, 0, 514, 0, 104,
	147, 0, 156, 120, 222, 158, 118, 117, 162, 165,
	204, 153, 101, 110, 180, 108, 207, 203, 217, 175,
	215, 210, 197, 189, 190, 174, 0, 206, 183, 188,
	182, 201, 212, 213, 181, 227, 178, 221, 177, 88,
	220, 200, 89, 211, 216, 198, 195, 176, 214, 196,
	194, 191, 185, 0, 83, 0, 209, 218, 228, 97,
	515, 223, 224, 225, 0, 0, 95, 96, 93, 94,
	131, 132, 166, 167, 168, 148, 91, 0, 0, 151,
	134, 173, 0, 192, 226, 205, 187, 219, 0, 0,
	0, 0, 107, 154, 170, 145, 144, 160, 0, 0,
	0, 0, 0, 186, 161, 150, 122, 163, 99, 114,
	172, 115, 116, 142, 86, 130, 202, 112, 0, 102,
	81, 109, 82, 100, 124, 184, 127, 98, 152, 133,
	169, 193, 137, 0, 208, 199, 0, 0, 126, 155,
	128, 149, 121, 143, 92, 136, 164, 113, 140, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 139, 159, 111, 141, 80, 138, 0, 84,
	87, 171, 157, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 125, 129, 146, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 135, 0, 0, 0,
	90, 85, 123, 0, 0, 0, 514, 0, 104, 147,
	0, 156, 120, 222, 158, 118, 117, 162, 165, 204,
	153, 101, 110, 180, 108, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 88, 220,
	200, 89, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 83, 0, 209, 218, 228, 97, 515,
	223, 224, 225, 0, 0, 95, 96, 93, 94, 131,
	132, 166, 167, 168, 148, 91, 0, 0, 151, 134,
	173, 0, 192, 226, 205, 187, 219, 0, 0, 0,
	0, 107, 154, 170, 145, 144, 160, 0, 0, 0,
	0, 0, 186, 161, 150, 122, 163, 99, 114, 172,
	115, 116, 142, 86, 130, 202, 112, 0, 102, 81,
	109, 82, 100, 124, 184, 127, 98, 152, 133, 169,
	193, 137, 0, 208, 199, 0, 0, 126, 155, 128,
	149, 121, 143, 92, 136, 164, 113, 140, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 139, 159, 111, 141, 80, 138, 0, 84, 87,
	171, 157, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 125, 129, 146, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 135, 0, 0, 0, 90,
	85, 123, 0, 0, 0, 514, 0, 104, 147, 0,
	156, 120, 222, 158, 118, 117, 162, 165, 204, 153,
	101, 110, 180, 108, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 88, 220, 200,
	89, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 83, 0, 209, 218, 228, 97, 515, 223,
	224, 225, 0, 0, 95, 96, 93, 94, 131, 132,
	166, 167, 168, 148, 91, 0, 0, 151, 134, 173,
	0, 192, 226, 205, 187, 219, 0, 0, 0, 0,
	107, 154, 170, 145, 144, 160, 0, 0, 0, 0,
	0, 186, 161, 150, 122, 163, 99, 114, 172, 115,
	116, 142, 86, 130, 202, 112, 0, 102, 81, 109,
	82, 100, 124, 184, 127, 98, 152, 133, 169, 193,
	137, 0, 208, 199, 0, 0, 126, 155, 128, 149,
	121, 143, 92, 136, 164, 113, 140, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	139, 159, 111, 141, 80, 138, 0, 84, 87, 171,
	157, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	125, 129, 146, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 135, 0, 0, 0, 90, 85,
	123, 0, 0, 0, 514, 0, 104, 147, 0, 156,
	120, 222, 158, 118, 117, 162, 165, 204, 153, 101,
	110, 180, 108, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 88, 220, 200, 89,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 83, 0, 209, 218, 228, 97, 515, 223, 224,
	225, 0, 0, 95, 96, 93, 94, 131, 132, 166,
	167, 168, 148, 91, 0, 0, 151, 134, 173, 0,
	192, 226, 205, 187, 219, 0, 0, 0, 0, 107,
	154, 170, 145, 144, 160, 0, 202, 0, 0, 618,
	186, 292, 0, 0, 0, 184, 0, 291, 0, 0,
	328, 193, 0, 0, 208, 199, 0, 0, 0, 0,
	321, 322, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 341, 309, 308, 310, 311, 312, 313, 0,
	0, 179, 314, 315, 316, 0, 0, 289, 302, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 300, 621, 0, 0, 0, 339, 0, 301, 0,
	0, 298, 303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 337, 0, 0, 204,
	0, 0, 0, 180, 0, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 0, 220,
	200, 0, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 0, 0, 209, 218, 228, 0, 0,
	223, 224, 225, 0, 0, 329, 338, 335, 336, 333,
	334, 332, 331, 330, 340, 323, 324, 326, 0, 325,
	173, 0, 192, 226, 205, 187, 219, 0, 0, 202,
	0, 0, 0, 0, 292, 0, 0, 0, 184, 0,
	291, 0, 186, 328, 193, 0, 0, 208, 199, 0,
	0, 0, 0, 321, 322, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 341, 309, 308, 310, 311,
	312, 313, 0, 0, 179, 314, 315, 316, 0, 0,
	289, 302, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 300, 621, 0, 0, 0, 339,
	0, 301, 0, 0, 298, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 337,
	0, 0, 204, 0, 0, 0, 180, 0, 207, 203,
	217, 175, 215, 210, 197, 189, 190, 174, 0, 206,
	183, 188, 182, 201, 212, 213, 181, 227, 178, 221,
	177, 0, 220, 200, 0, 211, 216, 198, 195, 176,
	214, 196, 194, 191, 185, 0, 0, 0, 209, 218,
	228, 0, 0, 223, 224, 225, 0, 0, 329, 338,
	335, 336, 333, 334, 332, 331, 330, 340, 323, 324,
	326, 0, 325, 173, 0, 192, 226, 205, 187, 219,
	0, 0, 202, 0, 0, 0, 0, 292, 0, 0,
	0, 184, 0, 291, 0, 186, 328, 193, 0, 0,
	208, 199, 0, 0, 0, 0, 321, 322, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 283, 341, 309,
	308, 310, 311, 312, 313, 0, 0, 179, 314, 315,
	316, 0, 0, 289, 302, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 300, 0, 0,
	0, 0, 339, 0, 301, 0, 0, 298, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 337, 0, 0, 204, 0, 0, 0, 180,
	0, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 0, 220, 200, 0, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 0,
	0, 209, 218, 228, 0, 0, 223, 224, 225, 0,
	0, 329, 338, 335, 336, 333, 334, 332, 331, 330,
	340, 323, 324, 326, 22, 325, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 202, 0, 0, 0, 0,
	292, 0, 0, 0, 184, 0, 291, 0, 186, 328,
	193, 0, 0, 208, 199, 0, 0, 0, 0, 321,
	322, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 341, 309, 308, 310, 311, 312, 313, 0, 0,
	179, 314, 315, 316, 0, 0, 289, 302, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	300, 0, 0, 0, 0, 339, 0, 301, 0, 0,
	298, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 337, 0, 0, 204, 0,
	0, 0, 180, 0, 207, 203, 217, 175, 215, 210,
	197, 189, 190, 174, 0, 206, 183, 188, 182, 201,
	212, 213, 181, 227, 178, 221, 177, 0, 220, 200,
	0, 211, 216, 198, 195, 176, 214, 196, 194, 191,
	185, 0, 0, 0, 209, 218, 228, 0, 0, 223,
	224, 225, 0, 0, 329, 338, 335, 336, 333, 334,
	332, 331, 330, 340, 323, 324, 326, 0, 325, 173,
	0, 192, 226, 205, 187, 219, 0, 0, 202, 0,
	0, 0, 0, 292, 0, 0, 0, 184, 0, 291,
	0, 186, 328, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 321, 322, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 341, 309, 308, 310, 311, 312,
	313, 0, 0, 179, 314, 315, 316, 0, 0, 289,
	302, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 300, 0, 0, 0, 0, 339, 0,
	301, 0, 0, 298, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 337, 0,
	0, 204, 0, 0, 0, 180, 0, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 0, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	0, 220, 200, 0, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 0, 0, 209, 218, 228,
	0, 0, 223, 224, 225, 0, 0, 329, 338, 335,
	336, 333, 334, 332, 331, 330, 340, 323, 324, 326,
	0, 325, 173, 202, 192, 226, 205, 187, 219, 0,
	0, 0, 184, 0, 0, 0, 0, 328, 193, 0,
	0, 208, 199, 0, 186, 0, 0, 321, 322, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 341,
	309, 308, 310, 311, 312, 313, 0, 0, 179, 314,
	315, 316, 0, 0, 0, 302, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 300, 0,
	0, 0, 0, 339, 0, 301, 0, 0, 298, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 337, 0, 0, 204, 0, 0, 0,
	180, 0, 207, 203, 217, 175, 215, 210, 197, 189,
	190, 174, 0, 206, 183, 188, 182, 201, 212, 213,
	181, 227, 178, 221, 177, 0, 220, 200, 0, 211,
	216, 198, 195, 176, 214, 196, 194, 191, 185, 0,
	0, 0, 209, 218, 228, 0, 0, 223, 224, 225,
	0, 0, 329, 338, 335, 336, 333, 334, 332, 331,
	330, 340, 323, 324, 326, 22, 325, 173, 0, 192,
	226, 205, 187, 219, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 186,
	0, 193, 0, 0, 208, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 424, 47,
	0, 0, 230, 0, 438, 439, 440, 441, 442, 443,
	444, 179, 422, 423, 420, 426, 425, 435, 436, 428,
	429, 430, 431, 432, 433, 434, 427, 0, 0, 437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 180, 0, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 0, 220,
	200, 0, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 0, 0, 209, 218, 228, 0, 0,
	223, 224, 225, 0, 0, 0, 0, 22, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	173, 0, 192, 226, 205, 187, 219, 184, 0, 0,
	0, 0, 0, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 180, 0, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 0, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	0, 220, 200, 0, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 0, 202, 209, 218, 228,
	0, 0, 223, 224, 225, 184, 0, 0, 0, 0,
	0, 193, 0, 0, 208, 199, 0, 0, 0, 0,
	0, 0, 173, 0, 192, 226, 205, 187, 219, 0,
	0, 0, 496, 0, 0, 494, 0, 0, 495, 0,
	0, 179, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 180, 0, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 0, 220,
	200, 0, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 0, 202, 209, 218, 228, 0, 0,
	223, 224, 225, 184, 0, 0, 0, 0, 0, 193,
	0, 0, 208, 199, 0, 0, 0, 0, 0, 0,
	173, 0, 192, 226, 205, 187, 219, 0, 0, 0,
	230, 0, 897, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 180, 0, 207, 203, 217, 175, 215, 210, 197,
	189, 190, 174, 0, 206, 183, 188, 182, 201, 212,
	213, 181, 227, 178, 221, 177, 0, 220, 200, 0,
	211, 216, 198, 195, 176, 214, 196, 194, 191, 185,
	0, 0, 202, 209, 218, 228, 0, 0, 223, 224,
	225, 184, 0, 0, 0, 0, 0, 193, 0, 0,
	208, 199, 0, 0, 0, 0, 0, 0, 173, 0,
	192, 226, 205, 187, 219, 47, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 180,
	0, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 0, 220, 200, 0, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 0,
	202, 209, 218, 228, 0, 0, 223, 224, 225, 184,
	0, 0, 0, 0, 0, 193, 0, 0, 208, 199,
	0, 0, 0, 0, 0, 0, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 496, 0, 730, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 180, 0, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 0, 220, 200, 0, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 0, 0, 209,
	218, 228, 202, 0, 223, 224, 225, 0, 0, 0,
	354, 184, 0, 0, 0, 0, 0, 193, 0, 0,
	208, 199, 0, 0, 173, 0, 192, 226, 205, 187,
	219, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 186, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 180,
	0, 207, 203, 217, 175, 215, 210, 197, 189, 190,
	174, 0, 206, 183, 188, 182, 201, 212, 213, 181,
	227, 178, 221, 177, 0, 220, 200, 0, 211, 216,
	198, 195, 176, 214, 196, 194, 191, 185, 0, 0,
	202, 209, 218, 228, 0, 0, 223, 224, 225, 184,
	0, 0, 0, 0, 0, 193, 0, 0, 208, 199,
	0, 0, 0, 0, 0, 0, 173, 0, 192, 226,
	205, 187, 219, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 180, 0, 207,
	203, 217, 175, 215, 210, 197, 189, 190, 174, 0,
	206, 183, 188, 182, 201, 212, 213, 181, 227, 178,
	221, 177, 0, 220, 200, 0, 211, 216, 198, 195,
	176, 214, 196, 194, 191, 185, 0, 0, 202, 209,
	218, 228, 0, 0, 223, 224, 225, 184, 0, 0,
	0, 0, 0, 193, 0, 0, 208, 199, 0, 0,
	0, 0, 0, 0, 173, 0, 192, 226, 205, 187,
	219, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 180, 0, 207, 203, 217,
	175, 215, 210, 197, 189, 190, 174, 0, 206, 183,
	188, 182, 201, 212, 213, 181, 227, 178, 221, 177,
	0, 220, 200, 0, 211, 216, 198, 195, 176, 214,
	196, 194, 191, 185, 0, 0, 202, 209, 218, 228,
	0, 0, 223, 224, 225, 184, 0, 0, 0, 0,
	0, 193, 0, 0, 208, 199, 0, 0, 0, 0,
	0, 0, 173, 0, 192, 226, 205, 187, 219, 0,
	0, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 180, 0, 207, 203, 217, 175, 215,
	210, 197, 189, 190, 174, 0, 206, 183, 188, 182,
	201, 212, 213, 181, 227, 178, 221, 177, 0, 220,
	200, 0, 211, 216, 198, 195, 176, 214, 196, 194,
	191, 185, 0, 0, 0, 209, 218, 228, 0, 0,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 192, 226, 205, 187, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186,
}
var yyPact = [...]int{

	1005, -1000, -167, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	697, 732, -1000, -1000, -1000, -1000, -1000, 515, -35, -7,
	-39, 12, 11, 1613, 5509, -1000, -1000, 277, -158, -1000,
	-1000, -1000, -1000, -1000, 550, -1000, -1000, -1000, -1000, -1000,
	686, 692, 552, 680, 579, -1000, -7, 5509, 717, -1000,
	-143, 418, -18, 412, -18, 10, -1000, -25, 376, -25,
	5509, 5509, -1000, 715, -42, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 367, 651, 3791, 3791, 697, -1000, 550, -1000, -1000,
	-1000, 639, -1000, -1000, 213, 5065, 634, 39, 5509, 691,
	425, -1000, 1220, 5509, 112, 543, 5509, 5509, 5509, 673,
	541, 5509, -1000, -1000, -1000, 5509, 5509, 5509, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 728, 60, 269, -1000, 3791,
	4128, 438, 438, -1000, -1000, 20, -1000, -1000, 3966, 3966,
	3966, 3966, 3966, 3966, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 438, 35, -1000,
	3608, 438, 438, 438, 438, 438, 438, 3791, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, -1000, -1000, 494, -1000, 221, 686, 367, 579, 4469,
	553, -1000, -1000, 452, 5509, -1000, 5361, 2867, 711, -147,
	-164, 231, 234, -86, -1000, -1000, 497, -1000, 497, 497,
	497, 497, -60, -60, -60, -60, -1000, -1000, -1000, -1000,
	-1000, 510, -1000, 497, 497, 497, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 507, 507, 507, 501, 501, -1000,
	672, 5509, -1000, 304, -1000, -1000, 5509, -1000, -1000, -1000,
	-1000, -1000, 591, 3791, 3791, 251, 3791, 3791, 83, 3966,
	263, 195, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
	3966, 3966, 3966, 3966, 3966, 3966, 3966, 306, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 362, -1000, 550, 437,
	437, 44, 44, 44, 44, 44, 1134, 3059, 2658, 367,
	403, 242, 3608, 3242, 3242, 3791, 3791, 3242, 681, 105,
	242, 5213, -1000, 367, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3242, 3242, 3242, 3242, 3791, -1000, -1000, -1000, 651,
	-1000, 681, 714, -1000, 599, 598, -1000, -1000, 3242, -1000,
	521, 5361, 438, -1000, 4321, -1000, 473, -1000, 99, -1000,
	32, -1000, -1000, -1000, -1000, -1000, 697, 3791, 438, -1000,
	-81, 97, -1000, -1000, 502, 659, 94, 357, -1000, -1000,
	642, -1000, 118, -88, -1000, -1000, 274, -60, -60, -1000,
	-1000, 43, 620, 43, 43, 43, 310, -1000, -1000, -1000,
	-1000, 273, -1000, -1000, -1000, 265, -1000, -1000, 2031, -1000,
	147, 95, -5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 586, 83, 183, -1000,
	-1000, 276, -1000, -1000, 242, 242, 445, -1000, -1000, -1000,
	-1000, 263, 3966, 3966, 3966, 145, 445, 1048, 545, 1010,
	44, 366, 366, 64, 64, 64, 64, 64, 560, 560,
	-1000, -1000, -1000, 367, -1000, -1000, -1000, 367, 3242, 479,
	-1000, -1000, 1371, 29, 438, 28, -1000, -1000, -1000, 3791,
	-1000, 367, 384, 384, 51, 271, 384, 3242, 201, -1000,
	3791, 367, -1000, 384, 367, 384, 384, -1000, -1000, 5509,
	-1000, -1000, -1000, -1000, 493, -1000, 661, 474, 460, -1000,
	-1000, 3425, 367, 394, 25, 697, 5361, 3791, 2658, 686,
	242, 355, 638, 93, 352, 5213, -1000, 350, -1000, -1000,
	-82, 290, -1000, -1000, -1000, 428, 43, 43, -1000, 348,
	126, -1000, -1000, -1000, 392, -1000, 476, 386, -1000, -1000,
	-1000, -1000, -1000, 5509, -1000, -1000, -1000, -1000, -1000, 342,
	-61, -1000, -1000, -1000, -1000, -1000, 145, 445, 996, -1000,
	3966, 3966, -1000, -1000, 384, 3242, -1000, -1000, 4913, -1000,
	-1000, 2240, 3242, 2449, 242, -1000, -1000, -1000, 161, 306,
	161, -126, 468, 101, -1000, 3791, 223, -1000, -1000, -1000,
	-1000, -1000, -1000, 711, 4765, 650, -1000, 438, -1000, -1000,
	498, 5213, 5213, 686, -1000, 242, -1000, -1000, 367, -1000,
	-67, 261, -1000, 382, -1000, 497, -1000, 103, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	305, 239, -1000, 226, -1000, -1000, -1000, 603, -1000, 3966,
	445, 445, -1000, -1000, -1000, -1000, 24, 367, -1000, 367,
	497, 497, -1000, 497, 501, -1000, 497, -37, 497, -38,
	367, 367, 438, -120, -1000, 242, 3791, 709, 464, 798,
	-1000, -1000, -1000, 677, 4149, 58, 725, -1000, 438, -1000,
	550, 23, -1000, -1000, 2031, 91, -1000, -1000, 5213, -1000,
	148, 647, -1000, 640, -1000, 426, 404, 340, 445, 1822,
	-1000, -1000, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3966, 367, 301, 242, 699, 690, 4765, 4765,
	4765, 4765, -1000, 576, 566, -1000, 575, 564, 565, 5509,
	-1000, 380, 4149, 67, -1000, 4617, -1000, -1000, 5361, 460,
	367, 5213, -1000, 339, -1000, -1000, 293, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 63, -1000, -1000, -1000, 3791,
	3791, 798, 518, 674, -1000, -1000, -1000, -1000, 556, -1000,
	555, -1000, -1000, -1000, -1000, -1000, 6, 3, -1, -1000,
	447, -1000, -1000, -1000, -1000, 367, 30, -134, 242, 434,
	3791, 3791, -1000, -1000, 438, 438, 438, -1000, 585, -130,
	-139, 242, 242, 5213, 5213, 5213, -1000, 584, -1000, 318,
	-1000, 318, 318, -132, -1000, 5213, -1000, -1000, -135, -1000,
	-140, -1000,
}
var yyPgo = [...]int{

	0, 935, 934, 933, 928, 926, 925, 86, 497, 921,
	918, 917, 916, 915, 914, 913, 912, 910, 909, 907,
	883, 878, 877, 42, 876, 871, 866, 41, 865, 48,
	864, 863, 23, 163, 31, 28, 3, 862, 17, 13,
	4, 859, 858, 14, 852, 803, 851, 846, 842, 2,
	21, 834, 833, 832, 831, 36, 148, 829, 828, 826,
	825, 824, 823, 33, 1, 11, 9, 16, 820, 18,
	6, 819, 29, 818, 817, 816, 814, 37, 813, 40,
	812, 15, 32, 810, 26, 7, 30, 809, 310, 807,
	294, 261, 806, 804, 802, 20, 0, 59, 27, 22,
	800, 718, 38, 5, 799, 798, 64, 10, 25, 19,
	797, 796, 795, 794, 792, 787, 786, 227, 785, 784,
	24, 43, 783, 781, 778, 777, 768, 45, 12, 766,
	759, 758, 757, 44, 756, 39, 750, 748, 747, 746,
	8, 745, 744, 739, 50, 46, 738, 91,
}
var yyR1 = [...]int{

	0, 142, 143, 143, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 136, 138, 123, 123, 122, 122, 124, 124, 137,
	137, 137, 133, 111, 111, 111, 114, 114, 112, 112,
	112, 112, 112, 112, 112, 113, 113, 113, 113, 113,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 132,
	132, 117, 117, 127, 127, 128, 128, 128, 125, 125,
	126, 126, 129, 129, 129, 118, 118, 118, 118, 118,
	130, 130, 120, 120, 120, 121, 121, 131, 131, 131,
	131, 131, 119, 119, 134, 139, 139, 139, 139, 135,
	135, 141, 141, 140, 16, 16, 16, 16, 16, 17,
	17, 17, 1, 19, 2, 3, 4, 5, 5, 110,
	110, 110, 20, 20, 20, 20, 20, 20, 21, 22,
	22, 22, 22, 146, 23, 24, 24, 25, 25, 25,
	29, 29, 29, 27, 27, 28, 28, 34, 34, 33,
	33, 35, 35, 35, 35, 100, 100, 100, 99, 99,
	37, 37, 38, 38, 39, 39, 40, 40, 40, 47,
	41, 41, 41, 41, 105, 105, 104, 104, 104, 103,
	103, 42, 42, 42, 42, 43, 43, 43, 43, 44,
	44, 46, 46, 45, 45, 48, 48, 48, 48, 49,
	49, 50, 50, 36, 36, 36, 36, 36, 36, 36,
	89, 89, 52, 52, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 62, 62, 62, 62, 62, 62,
	53, 53, 53, 53, 53, 53, 53, 32, 32, 63,
	63, 63, 69, 64, 64, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 60, 60, 60, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 59, 59, 59,
	59, 59, 59, 59, 59, 147, 147, 61, 61, 61,
	61, 30, 30, 30, 30, 30, 108, 108, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 73, 73, 31, 31, 71, 71, 72, 74, 74,
	70, 70, 70, 55, 55, 55, 55, 55, 55, 55,
	57, 57, 57, 75, 75, 76, 76, 77, 77, 78,
	78, 79, 80, 80, 80, 81, 81, 81, 81, 82,
	82, 82, 54, 54, 54, 54, 54, 54, 83, 83,
	83, 83, 84, 84, 65, 65, 67, 67, 66, 68,
	85, 85, 86, 87, 87, 90, 90, 91, 91, 88,
	88, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 93, 93, 93, 94, 94, 97, 97, 98, 98,
	101, 101, 102, 102, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 144, 145, 106, 107, 107,
	107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 4,
	5, 4, 3, 3, 2, 2, 3, 3, 2, 1,
	1, 1, 3, 5, 5, 5, 3, 3, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -142, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 128, 111, 121, 47, 201, 123, 208, 209, 211,
	24, 122, 126, 127, -144, 7, 185, 50, -143, 214,
	-77, 14, -25, 5, -23, -146, -23, -23, -23, -106,
	-136, 50, 177, 113, 112, -88, 116, 112, 113, 177,
	112, 112, -110, 170, 107, 174, 175, 53, -95, -96,
	67, 21, 23, 164, 70, 102, 15, 71, 149, 152,
	101, 186, 45, 178, 179, 176, 177, 169, 28, 9,
	24, 122, 20, 95, 109, 74, 75, 202, 125, 22,
	123, 65, 18, 48, 10, 12, 13, 117, 116, 86,
	113, 43, 7, 103, 25, 83, 39, 27, 41, 84,
	16, 180, 181, 30, 190, 97, 46, 33, 68, 63,
	49, 66, 14, 44, 206, 205, 85, 110, 185, 42,
	6, 189, 29, 121, 203, 40, 112, 73, 115, 64,
	207, 5, 118, 8, 47, 119, 182, 183, 184, 31,
	204, 72, 11, 191, 135, 129, 157, 148, 146, 62,
	124, 144, 140, 138, 26, 162, 213, 196, 139, 133,
	134, 161, 193, 32, 160, 156, 159, 132, 155, 36,
	151, 141, 17, 127, 120, 195, 137, 126, 35, 166,
	131, 153, 142, 143, 158, 130, 154, 128, 167, 197,
	150, 147, 114, 171, 172, 173, 194, 145, 168, -101,
	53, -96, -106, -106, 56, 210, -106, -106, -106, -106,
	-106, -7, -81, 16, 15, -10, -8, -144, 6, 19,
	20, -29, 37, 38, -24, -88, -45, -101, 10, 198,
	-137, -133, 53, -91, 117, 53, -91, 112, -90, 117,
	53, -90, -45, -45, -106, 10, 112, 177, -106, -106,
	-106, -106, -145, 52, -82, 18, 30, -36, -51, 68,
	-56, 28, 22, -55, -52, -70, -68, -69, 102, 91,
	92, 99, 69, 103, -60, -58, -59, -61, 55, 54,
	56, 57, 58, 59, 63, 64, 65, -97, -101, -66,
	-144, 41, 42, 186, 187, 190, 188, 71, 31, 176,
	184, 183, 182, 180, 181, 178, 179, 117, 177, 97,
	185, 53, -96, -78, -79, -36, -77, -7, -23, 33,
	-27, 20, 61, -46, 25, -45, 29, 104, -45, 15,
	52, 51, -111, -114, -116, -115, -112, -113, 146, 147,
	102, 150, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 124, 142, 143, 144, 145, 129, 130, 131,
	132, 133, 134, 135, 137, 138, 139, 140, 141, -101,
	68, 49, -45, -45, -45, 22, 49, -101, -45, -45,
	-45, 8, 86, 67, 66, 83, 51, 17, -36, -53,
	86, 68, 84, 85, 70, 88, 87, 98, 91, 92,
	93, 94, 95, 96, 97, 89, 90, 101, 76, 77,
	78, 79, 80, 81, 82, -89, -144, -69, -144, 105,
	106, -56, -56, -56, -56, -56, -56, -144, 104, -7,
	-64, -36, -144, -144, -144, -144, -144, -144, -144, -73,
	-36, -144, -147, -144, -147, -147, -147, -147, -147, -147,
	-147, -144, -144, -144, -144, 51, -80, 23, 24, -81,
	-145, -29, -57, -97, 56, 59, 53, -96, -28, 40,
	-54, 29, 31, -7, -144, -45, -85, -86, -70, -97,
	-101, -102, -101, -95, 107, 170, -50, 11, 200, -138,
	-123, 213, -133, -134, -139, 120, 118, -135, 113, 27,
	-129, 63, 68, -125, 167, -117, 50, -117, -117, -117,
	-117, -120, 149, -120, -120, -120, 50, -117, -117, -117,
	-127, 50, -127, -127, -128, 50, -128, 22, -45, -92,
	110, 213, 186, 108, 164, 149, 62, 28, 109, 14,
	197, 53, -45, -106, -106, -106, 35, -36, -36, -62,
	63, 68, 64, 65, -36, -36, -56, -63, -66, -69,
	60, 86, 84, 85, 70, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-108, 53, 55, 53, -55, -55, -97, -34, 20, -33,
	-35, 93, -36, -101, -98, -102, -97, -95, -145, 51,
	-145, -7, -33, -33, -36, -36, -33, -27, -71, -72,
	72, -97, -145, -33, -34, -33, -33, -79, -82, -87,
	18, 10, 31, 31, -33, -84, 49, -85, -65, -67,
	-66, -144, -7, -83, -97, -50, 51, 76, 104, -77,
	-36, -144, -124, 164, 76, 50, 27, -135, 53, 53,
	-118, 28, 63, -126, 168, 56, -120, -120, -121, 101,
	29, -121, -121, -121, -132, 55, 56, 56, -107, -144,
	-98, -95, -106, -93, -94, 115, 21, 113, 27, 76,
	115, 36, 63, 64, 65, -63, -56, -56, -56, -32,
	125, 67, -145, -145, -33, 51, -100, -99, 21, -97,
	55, 104, -144, 104, -36, -145, -145, -145, 51, 119,
	21, -145, -33, -74, -72, 74, -36, -145, -145, -145,
	-145, -145, -45, -37, 10, 26, -84, 51, -145, -145,
	-145, 51, 104, -77, -86, -36, -98, -81, 53, -122,
	28, 76, 53, -141, -140, -97, 53, -130, 164, 55,
	56, 57, 63, 52, -121, -121, 53, 53, 102, 52,
	51, 51, 52, 51, -45, -106, 53, 149, -32, 67,
	-56, -56, -145, -35, -99, 93, -102, -34, -98, -109,
	102, 146, 124, 144, 140, 161, 151, 166, 142, 167,
	-108, -109, 191, -77, 75, -36, 73, -50, -38, -39,
	-40, -41, -47, -69, -144, -45, 27, -67, 31, -7,
	-144, -97, -97, -81, -145, 152, 56, 52, 51, -117,
	-131, 120, 27, 118, 55, 56, 56, 29, -56, 104,
	-145, -145, -117, -117, -117, -128, -117, 134, -117, 134,
	-145, -145, -144, -31, 189, -36, -75, 12, 51, -42,
	-43, -44, 39, 43, 45, 40, 41, 42, 46, -105,
	21, -38, -144, -104, -103, 21, -101, 55, 8, -65,
	-7, 104, -107, 76, -140, -119, 62, 27, 27, 52,
	52, 53, 93, -120, 53, -56, -145, 55, -76, 13,
	15, -39, -40, -39, -40, 39, 39, 39, 44, 39,
	44, 39, -43, -101, -145, -48, 47, 116, 48, -103,
	-85, -145, -97, 53, 55, -30, 86, 194, -36, -64,
	49, 49, 39, 39, 113, 113, 113, -145, 192, 46,
	195, -36, -36, -144, -144, -144, 36, 193, 196, -49,
	-97, -49, -49, 36, -145, 51, -145, -145, 194, -97,
	195, 196,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	377, 0, 163, 163, 163, 163, 597, 0, 0, 419,
	0, 0, 0, 0, 0, 597, 597, 0, 0, 597,
	597, 597, 597, 597, 0, 31, 32, 595, 1, 3,
	385, 0, 0, 167, 170, 165, 419, 0, 0, 35,
	36, 0, 417, 0, 417, 0, 420, 415, 0, 415,
	0, 0, 597, 522, 456, 597, 597, 149, 150, 151,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 158,
	440, 441, 144, 145, 597, 597, 148, 159, 160, 161,
	162, 25, 389, 0, 0, 377, 27, 0, 163, 168,
	169, 173, 171, 172, 164, 0, 0, 223, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 143, 152, 0, 0, 0, 156, 157,
	146, 147, 26, 596, 21, 0, 0, 386, 233, 0,
	238, 240, 0, 275, 276, 277, 278, 279, 0, 0,
	0, 0, 0, 0, 301, 302, 303, 304, 363, 364,
	365, 366, 367, 368, 369, 242, 243, 360, 0, 409,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 325,
	325, 325, 325, 325, 325, 325, 325, 0, 0, 0,
	0, -2, -2, 378, 379, 382, 385, 25, 170, 0,
	175, 174, 166, 0, 0, 222, 0, 0, 231, 0,
	43, 0, 102, 98, 54, 55, 91, 57, 91, 91,
	91, 91, 112, 112, 112, 112, 83, 84, 85, 86,
	87, 0, 70, 91, 91, 91, 74, 58, 59, 60,
	61, 62, 63, 64, 93, 93, 93, 95, 95, 38,
	0, 0, 40, 0, 139, 416, 0, 141, 597, 597,
	597, 390, 0, 0, 0, 0, 0, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 266, 239, 0, 253, 0, 0,
	0, 295, 296, 297, 298, 299, 0, 177, 0, 25,
	0, 273, 0, 0, 0, 0, 0, 0, 173, 0,
	352, 0, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 0, 177, 0, 0, 0, 381, 383, 384, 389,
	28, 173, 0, 370, 0, 0, 436, 437, 0, 176,
	402, 0, 0, -2, 0, 221, 231, 410, 0, 360,
	0, 224, 442, 443, 456, 522, 377, 0, 0, 41,
	47, 0, 50, 51, 0, 0, 0, 0, 129, 130,
	105, 103, 0, 100, 99, 56, 0, 112, 112, 77,
	78, 115, 0, 115, 115, 115, 0, 71, 72, 73,
	65, 0, 66, 67, 68, 0, 69, 418, 598, 597,
	431, 0, 428, 421, 422, 423, 424, 425, 426, 427,
	429, 430, 140, 153, 154, 155, 0, 234, 235, 237,
	254, 0, 256, 258, 387, 388, 244, 245, 269, 270,
	271, 0, 0, 0, 0, 267, 249, 0, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	294, 336, 337, 0, 292, 293, 300, 0, 0, 178,
	179, 181, 185, 0, 361, 0, 438, -2, 272, 0,
	408, 25, 0, 0, 0, 0, 0, 0, 358, 355,
	0, 0, 326, 0, 0, 0, 0, 380, 22, 0,
	413, 414, 371, 372, 190, 29, 0, 402, 392, 404,
	406, 0, 25, 0, 398, 377, 0, 0, 0, 385,
	232, 0, 45, 0, 0, 0, 125, 0, 127, 128,
	110, 0, 104, 53, 101, 0, 115, 115, 79, 0,
	0, 80, 81, 82, 0, 89, 0, 0, 39, 599,
	600, 439, 134, 0, 597, 432, 433, 434, 435, 0,
	0, 391, 255, 257, 259, 246, 267, 250, 0, 247,
	0, 0, 241, 305, 0, 0, 182, 186, 0, 188,
	189, 0, 177, 0, 274, -2, 308, 309, 0, 0,
	0, 0, 377, 0, 356, 0, 0, 316, 327, 328,
	329, 330, 23, 231, 0, 0, 30, 0, 407, -2,
	0, 0, 0, 385, 411, 412, 361, 34, 0, 42,
	0, 0, 44, 0, 131, 91, 126, 117, 111, 106,
	107, 108, 109, 92, 75, 76, 116, 113, 114, 88,
	0, 0, 96, 0, 135, 136, 137, 0, 248, 0,
	268, 251, 306, 180, 187, 183, 0, 0, 362, 0,
	91, 91, 341, 91, 95, 344, 91, 346, 91, 349,
	0, 0, 0, 353, 315, 359, 0, 373, 191, 192,
	194, 195, 196, 204, 0, 206, 0, 405, 0, -2,
	0, 400, 399, 33, 598, 0, 48, 124, 0, 133,
	122, 0, 119, 121, 90, 0, 0, 0, 252, 0,
	307, 310, 338, 112, 342, 343, 345, 347, 348, 350,
	312, 311, 0, 0, 0, 357, 375, 0, 0, 0,
	0, 0, 211, 0, 0, 214, 0, 0, 0, 0,
	205, 0, 0, 225, 207, 0, 209, 210, 0, 395,
	25, 0, 37, 0, 132, 52, 0, 118, 120, 94,
	97, 138, 184, 339, 340, 331, 314, 354, 24, 0,
	0, 193, 200, 0, 203, 212, 213, 215, 0, 217,
	0, 219, 220, 197, 198, 199, 0, 0, 0, 208,
	403, -2, 401, 46, 123, 0, 0, 0, 376, 374,
	0, 0, 216, 218, 0, 0, 0, 313, 0, 0,
	0, 201, 202, 0, 0, 0, 332, 0, 335, 0,
	229, 0, 0, 333, 226, 0, 227, 228, 0, 230,
	0, 334,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 214,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:264
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:269
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:270
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:274
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:296
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:308
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:342
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:353
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:375
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:381
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:387
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:393
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:399
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:406
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:414
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:421
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:432
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:439
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:445
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:463
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:467
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:473
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:478
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:482
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:488
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:498
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:671
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:742
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:772
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:776
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:780
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:785
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:794
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:806
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:815
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:825
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:831
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:835
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:839
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:863
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:875
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:879
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:884
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:889
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:893
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:900
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:908
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:913
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:923
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.statement = &Xa{}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:941
		{
			yyVAL.statement = &Explain{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:947
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:953
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:976
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:982
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:986
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:990
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:994
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &OtherRead{}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.statement = &OtherRead{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			setAllowComments(yylex, true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.bytes2 = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.str = UnionStr
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = UnionAllStr
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.str = UnionDistinctStr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = SQLCacheStr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.str = DistinctStr
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.str = StraightJoinHint
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.selectExprs = nil
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.empty = struct{}{}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.str = JoinStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = JoinStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.str = JoinStr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.str = StraightJoinStr
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.str = LeftJoinStr
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = LeftJoinStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.str = RightJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.str = RightJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.str = NaturalJoinStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.indexHints = nil
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.expr = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = IsNullStr
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = IsNotNullStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = IsTrueStr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.str = IsNotTrueStr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.str = IsFalseStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.str = IsNotFalseStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.str = EqualStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = LessThanStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = GreaterThanStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.str = LessEqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = GreaterEqualStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = NotEqualStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1623
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1631
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1653
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.str = BooleanModeStr
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.str = QueryExpansionStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = nil
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.str = string("")
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.expr = &NullVal{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.exprs = nil
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.orderBy = nil
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.str = AscScr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.str = AscScr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.str = DescScr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.limit = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.str = ForUpdateStr
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.str = ShareModeStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2103
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.updateExprs = nil
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.byt = 0
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.byt = 1
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.byt = 0
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.byt = 1
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.str = IgnoreStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2457
		{
			decNesting(yylex)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2462
		{
			forceEOF(yylex)
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2467
		{
			forceEOF(yylex)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2471
		{
			forceEOF(yylex)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
